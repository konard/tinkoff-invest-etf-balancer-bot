// –í–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
process.env.DEBUG = 'bot:balancer';

import { balancer } from './src/balancer';
import { Wallet, DesiredWallet } from './src/types.d';
import { convertNumberToTinkoffNumber } from './src/utils';

console.log('=== –¢–ï–°–¢ –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê –° DEBUG –õ–û–ì–ê–ú–ò ===\n');

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
const testWallet: Wallet = [
  {
    base: 'TGLD',
    quote: 'RUB', 
    figi: 'BBG004S68505',
    amount: 50,
    lotSize: 1,
    price: convertNumberToTinkoffNumber(100),
    priceNumber: 100,
    lotPrice: convertNumberToTinkoffNumber(100),
    lotPriceNumber: 100,
    totalPrice: convertNumberToTinkoffNumber(5000),
    totalPriceNumber: 5000,
  },
  {
    base: 'TRUR',
    quote: 'RUB',
    figi: 'BBG004S68614', 
    amount: 10,
    lotSize: 1,
    price: convertNumberToTinkoffNumber(100),
    priceNumber: 100,
    lotPrice: convertNumberToTinkoffNumber(100),
    lotPriceNumber: 100,
    totalPrice: convertNumberToTinkoffNumber(1000),
    totalPriceNumber: 1000,
  },
  {
    base: 'RUB',
    quote: 'RUB',
    figi: undefined,
    amount: 1000,
    lotSize: 1,
    price: convertNumberToTinkoffNumber(1),
    priceNumber: 1,
    lotPrice: convertNumberToTinkoffNumber(1), 
    lotPriceNumber: 1,
    totalPrice: convertNumberToTinkoffNumber(1000),
    totalPriceNumber: 1000,
  }
];

const desiredWallet: DesiredWallet = {
  'TGLD': 50,
  'TRUR': 50,
};

(global as any).INSTRUMENTS = [
  { ticker: 'TGLD', figi: 'BBG004S68505', lot: 1 },
  { ticker: 'TRUR', figi: 'BBG004S68614', lot: 1 }
];

async function testWithDebug() {
  console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º debug —Ä–µ–∂–∏–º–æ–º...\n');
  
  try {
    const result = await balancer(testWallet, desiredWallet, [], 'manual', true);
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –û–†–î–ï–†–ê:');
    if (result.ordersPlanned && result.ordersPlanned.length > 0) {
      result.ordersPlanned.forEach((order, index) => {
        const action = (order.toBuyLots || 0) > 0 ? '–ö–£–ü–ò–¢–¨' : '–ü–†–û–î–ê–¢–¨';
        const lots = Math.abs(order.toBuyLots || 0);
        console.log(`${index + 1}. ${action} ${lots} –ª–æ—Ç–æ–≤ ${order.base}`);
      });
    } else {
      console.log('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error);
  }
}

testWithDebug();