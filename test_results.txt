bun test v1.2.22 (6bafe260)

src/__tests__/index.test.ts:
error: Cannot find package 'request-promise' from '/tmp/gh-issue-solver-1758074196784/src/tools/etfCap.ts'
(fail) Application Entry Point > CLI Argument Processing > should handle --once argument [832.00ms]

src/__tests__/buyRequiresTotalMarginalSell.test.ts:
447 | 
448 |     it('should return null for loss positions', () => {
449 |       const lossPosition = mockWallet.find(p => p.base === 'TGLD')!;
450 |       const profit = calculatePositionProfit(lossPosition);
451 | 
452 |       expect(profit).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  profitAmount: -5,
  profitPercent: -4.166666666666666,
  meetsThreshold: true,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresTotalMarginalSell.test.ts:452:22)
(fail) buyRequiresTotalMarginalSell Configuration Tests > 5. Position Profit Calculation Tests > should return null for loss positions [2.00ms]

src/__tests__/enhancements.test.ts:
12 |       'TRUR': 25,
13 |       'TRND': 25
14 |     };
15 | 
16 |     it('should return enhanced result for manual mode', async () => {
17 |       const result = await buildDesiredWalletByMode('manual', baseDesiredWallet);
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/enhancements.test.ts:17:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/enhancements.test.ts:16:57)
(fail) ETF Balancer Enhancements > Manual/Default Mode Selection > should return enhanced result for manual mode [2.00ms]
19 |       expect(result.modeApplied).toBe('manual');
20 |       expect(result.metrics).toEqual([]);
21 |     });
22 | 
23 |     it('should return enhanced result for default mode', async () => {
24 |       const result = await buildDesiredWalletByMode('default', baseDesiredWallet);
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/enhancements.test.ts:24:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/enhancements.test.ts:23:58)
(fail) ETF Balancer Enhancements > Manual/Default Mode Selection > should return enhanced result for default mode [1.00ms]
172 |       const baseDesiredWallet: DesiredWallet = {
173 |         'TPAY': 50,
174 |         'TGLD': 50
175 |       };
176 | 
177 |       const result = await buildDesiredWalletByMode('manual', baseDesiredWallet);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/enhancements.test.ts:177:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/enhancements.test.ts:171:77)
(fail) ETF Balancer Enhancements > Enhanced Result Structure > should verify buildDesiredWalletByMode returns enhanced structure [1.00ms]

src/__tests__/buyRequiresIntegration.test.ts:
37 |       // Configuration validation
38 |       this.validateConfig(this.config);
39 | 
40 |       return this.config;
41 |     } catch (error) {
42 |       throw new Error(`Configuration loading error: ${error instanceof Error ? error.message : 'Unknown error'}`);
                     ^
error: Configuration loading error: Wallet validation failed: sum of weights for account 0 equals 104.96%, expected 100%
      at loadConfig (/tmp/gh-issue-solver-1758074196784/src/configLoader.ts:42:17)
      at getAccountById (/tmp/gh-issue-solver-1758074196784/src/configLoader.ts:47:25)
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:29:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:138:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:129:75)
(fail) buy_requires_total_marginal_sell Integration Tests > 1. Integration with Balancer - enabled=true > should handle sequential execution when buy_requires is enabled [9.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-default' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:158:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:152:82)
(fail) buy_requires_total_marginal_sell Integration Tests > 2. Integration with Balancer - enabled=false > should work normally when buy_requires_total_marginal_sell is disabled [2.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:179:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:173:76)
(fail) buy_requires_total_marginal_sell Integration Tests > 3. Different Selling Modes Integration > should handle only_positive_positions_sell mode in full balancer [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:207:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:193:74)
(fail) buy_requires_total_marginal_sell Integration Tests > 4. Threshold Integration Tests > should respect min_buy_rebalance_percent in full balancer flow [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:232:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:219:52)
(fail) buy_requires_total_marginal_sell Integration Tests > 4. Threshold Integration Tests > should process purchases above threshold [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-no-buy-requires' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:251:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:245:58)
(fail) buy_requires_total_marginal_sell Integration Tests > 5. Error Handling Integration > should handle missing configuration gracefully [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:269:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:263:48)
(fail) buy_requires_total_marginal_sell Integration Tests > 5. Error Handling Integration > should handle empty instruments list
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:290:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:279:54)
(fail) buy_requires_total_marginal_sell Integration Tests > 5. Error Handling Integration > should handle instruments not in portfolio [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-margin-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:308:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:303:51)
(fail) buy_requires_total_marginal_sell Integration Tests > 6. Margin Trading Integration > should work with margin trading enabled [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-no-margin' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:326:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:321:52)
(fail) buy_requires_total_marginal_sell Integration Tests > 6. Margin Trading Integration > should work with margin trading disabled [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:353:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:340:54)
(fail) buy_requires_total_marginal_sell Integration Tests > 7. Real-world Scenario Tests > should handle typical rebalancing scenario [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:379:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:366:68)
(fail) buy_requires_total_marginal_sell Integration Tests > 7. Real-world Scenario Tests > should handle portfolio with insufficient funds scenario [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:404:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:391:57)
(fail) buy_requires_total_marginal_sell Integration Tests > 7. Real-world Scenario Tests > should handle portfolio optimization scenario [1.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:450:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:418:53)
(fail) buy_requires_total_marginal_sell Integration Tests > 8. Performance and Edge Cases > should handle large portfolio efficiently [3.00ms]
65 |         };
66 |       }
67 | 
68 |       return config;
69 |     }
70 |     throw new Error(`Account with id '${accountId}' not found in CONFIG.json`);
                   ^
error: Account with id 'test-buy-requires-enabled' not found in CONFIG.json
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:70:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:480:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/buyRequiresIntegration.test.ts:461:46)
(fail) buy_requires_total_marginal_sell Integration Tests > 8. Performance and Edge Cases > should handle zero-value positions [4.00ms]

src/__tests__/balancer/margin-trading-position-management.test.ts:

# Unhandled error between tests
-------------------------------
108 |     };
109 | 
110 |     process.argv = ['node', 'index.ts'];
111 |   });
112 | 
113 |   afterEach(() => {
        ^
ReferenceError: afterEach is not defined
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-position-management.test.ts:113:3)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/test-utils/index.ts:504:5)
      at testSuite (/tmp/gh-issue-solver-1758074196784/src/__tests__/test-utils/index.ts:495:3)
      at /tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-position-management.test.ts:86:1
      at loadAndEvaluateModule (2:1)
-------------------------------


src/__tests__/balancer/margin-trading-strategies.test.ts:
211 |       ];
212 | 
213 |       // Apply margin strategy - should always recommend removal with remove strategy
214 |       const result = calculator.applyMarginStrategy(marginPositions, 'remove');
215 | 
216 |       expect(result.shouldRemoveMargin).toBe(true);
                                              ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:216:41)
(fail) Margin Trading Strategies Tests > Remove Strategy Tests > should always remove margin positions when using remove strategy [1.00ms]
258 | 
259 |       // Calculate transfer costs
260 |       const transferInfo = calculator.calculateTransferCost(marginPositions);
261 | 
262 |       // Verify cost calculation
263 |       expect(transferInfo.totalCost).toBe(250); // 25000 * 0.01 (only TMOS has cost, TRUR is free)
                                           ^
error: expect(received).toBe(expected)

Expected: 250
Received: 400

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:263:38)
(fail) Margin Trading Strategies Tests > Remove Strategy Tests > should calculate correct transfer costs for remove strategy [1.00ms]
312 | 
313 |       // Apply margin strategy - should never recommend removal with keep strategy
314 |       const result = calculator.applyMarginStrategy(marginPositions, 'keep');
315 | 
316 |       expect(result.shouldRemoveMargin).toBe(false);
317 |       expect(result.reason).toContain('keep margin');
                                  ^
error: expect(received).toContain(expected)

Expected to contain: "keep margin"
Received: "Not time to apply margin strategy"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:317:29)
(fail) Margin Trading Strategies Tests > Keep Strategy Tests > should never remove margin positions when using keep strategy [1.00ms]
352 |       expect(validation.exceededAmount).toBeGreaterThan(0);
353 | 
354 |       // But apply strategy should still recommend keeping
355 |       const result = calculator.applyMarginStrategy(marginPositions, 'keep');
356 |       expect(result.shouldRemoveMargin).toBe(false);
357 |       expect(result.reason).toContain('keep margin');
                                  ^
error: expect(received).toContain(expected)

Expected to contain: "keep margin"
Received: "Not time to apply margin strategy"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:357:29)
(fail) Margin Trading Strategies Tests > Keep Strategy Tests > should keep margin positions even when exceeding limits with keep strategy [1.00ms]
394 | 
395 |       // Apply margin strategy - should recommend keeping small positions
396 |       const result = calculator.applyMarginStrategy(marginPositions, 'keep_if_small');
397 | 
398 |       expect(result.shouldRemoveMargin).toBe(false);
399 |       expect(result.reason).toContain('keep margin');
                                  ^
error: expect(received).toContain(expected)

Expected to contain: "keep margin"
Received: "Not time to apply margin strategy"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:399:29)
(fail) Margin Trading Strategies Tests > Keep If Small Strategy Tests > should keep margin positions when they are below the maximum size limit [1.00ms]
430 |       ];
431 | 
432 |       // Apply margin strategy - should recommend removing large positions
433 |       const result = calculator.applyMarginStrategy(marginPositions, 'keep_if_small');
434 | 
435 |       expect(result.shouldRemoveMargin).toBe(true);
                                              ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:435:41)
(fail) Margin Trading Strategies Tests > Keep If Small Strategy Tests > should remove margin positions when they exceed the maximum size limit [1.00ms]
468 | 
469 |       // Apply margin strategy - should recommend keeping positions at limit
470 |       const result = calculator.applyMarginStrategy(marginPositions, 'keep_if_small');
471 | 
472 |       expect(result.shouldRemoveMargin).toBe(false);
473 |       expect(result.reason).toContain('keep margin');
                                  ^
error: expect(received).toContain(expected)

Expected to contain: "keep margin"
Received: "Not time to apply margin strategy"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:473:29)
(fail) Margin Trading Strategies Tests > Keep If Small Strategy Tests > should handle edge case with exactly at limit [1.00ms]
563 |         'unknown_strategy' as MarginBalancingStrategy
564 |       );
565 | 
566 |       // Should handle gracefully with default behavior
567 |       expect(result.shouldRemoveMargin).toBe(false);
568 |       expect(result.reason).toBe('Unknown strategy');
                                  ^
error: expect(received).toBe(expected)

Expected: "Unknown strategy"
Received: "Not time to apply margin strategy"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:568:29)
(fail) Margin Trading Strategies Tests > Strategy Integration Tests > should handle unknown strategy gracefully [3.00ms]
737 | 
738 |       // Should complete within reasonable time
739 |       expect(endTime - startTime).toBeLessThan(1000); // Less than 1 second
740 | 
741 |       // Should have valid result
742 |       expect(result.shouldRemoveMargin).toBe(true);
                                              ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/margin-trading-strategies.test.ts:742:41)
(fail) Margin Trading Strategies Tests > Strategy Performance and Edge Cases > should handle large portfolios with all strategies [3.00ms]

src/__tests__/balancer/desiredBuilder.test.ts:
94 | 
95 |   describe('Manual and Default Modes', () => {
96 |     it('should return baseDesired unchanged for manual mode', async () => {
97 |       const baseDesired = mockDesiredWallets.balanced;
98 | 
99 |       const result = await buildDesiredWalletByMode('manual', baseDesired);
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:99:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:96:63)
(fail) DesiredBuilder Module > Manual and Default Modes > should return baseDesired unchanged for manual mode [1.00ms]
104 |     });
105 | 
106 |     it('should return baseDesired unchanged for default mode', async () => {
107 |       const baseDesired = mockDesiredWallets.etfOnly;
108 | 
109 |       const result = await buildDesiredWalletByMode('default', baseDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:109:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:106:64)
(fail) DesiredBuilder Module > Manual and Default Modes > should return baseDesired unchanged for default mode
140 |             return null;
141 |         }
142 |       });
143 | 
144 |       // Add a timeout to prevent hanging
145 |       const resultPromise = buildDesiredWalletByMode('marketcap', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:145:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:118:56)
(fail) DesiredBuilder Module > Market Cap Mode > should calculate weights based on market cap [1.00ms]
181 |       try {
182 |         await buildDesiredWalletByMode('marketcap', baseDesired);
183 |         // If we reach here, the test failed
184 |         expect(true).toBe(false);
185 |       } catch (error) {
186 |         expect(error).toBeInstanceOf(BalancingDataError);
                            ^
error: expect(received).toBeInstanceOf(expected)

Expected constructor: [class BalancingDataError extends Error]
Received value: 177 |         TGLD: 20
178 |       };
179 | 
180 |       // Expect the function to throw a BalancingDataError
181 |       try {
182 |         await buildDesiredWalletByMode('marketcap', baseDesired);
                    ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:182:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:163:67)


      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:186:23)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:163:67)
(fail) DesiredBuilder Module > Market Cap Mode > should handle missing market cap data by throwing error [1.00ms]
225 |       mockToRubFromAum.mockImplementation(async (aumEntry) => {
226 |         return aumEntry?.amount || 0;
227 |       });
228 | 
229 |       // Add a timeout to prevent hanging
230 |       const resultPromise = buildDesiredWalletByMode('aum', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:230:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:192:49)
(fail) DesiredBuilder Module > AUM Mode > should calculate weights based on AUM [1.00ms]
258 |       try {
259 |         await buildDesiredWalletByMode('aum', baseDesired);
260 |         // If we reach here, the test failed
261 |         expect(true).toBe(false);
262 |       } catch (error) {
263 |         expect(error).toBeInstanceOf(BalancingDataError);
                            ^
error: expect(received).toBeInstanceOf(expected)

Expected constructor: [class BalancingDataError extends Error]
Received value: 254 |         TGLD: 20
255 |       };
256 | 
257 |       // Expect the function to throw a BalancingDataError
258 |       try {
259 |         await buildDesiredWalletByMode('aum', baseDesired);
                    ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:259:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:240:60)


      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:263:23)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:240:60)
(fail) DesiredBuilder Module > AUM Mode > should handle missing AUM data by throwing error [1.00ms]
299 |       mockToRubFromAum.mockImplementation(async (aumEntry) => {
300 |         return aumEntry?.amount || 0;
301 |       });
302 | 
303 |       // Add a timeout to prevent hanging
304 |       const resultPromise = buildDesiredWalletByMode('marketcap_aum', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:304:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:269:65)
(fail) DesiredBuilder Module > Market Cap AUM Mode > should use market cap when available, fallback to AUM [1.00ms]
341 |       mockToRubFromAum.mockImplementation(async (aumEntry) => {
342 |         return aumEntry?.amount || 0;
343 |       });
344 | 
345 |       // Add a timeout to prevent hanging
346 |       const resultPromise = buildDesiredWalletByMode('marketcap_aum', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:346:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:313:49)
(fail) DesiredBuilder Module > Market Cap AUM Mode > should handle partial data gracefully [1.00ms]
374 |       try {
375 |         await buildDesiredWalletByMode('marketcap_aum', baseDesired);
376 |         // If we reach here, the test failed
377 |         expect(true).toBe(false);
378 |       } catch (error) {
379 |         expect(error).toBeInstanceOf(BalancingDataError);
                            ^
error: expect(received).toBeInstanceOf(expected)

Expected constructor: [class BalancingDataError extends Error]
Received value: 370 |         TMOS: 50
371 |       };
372 | 
373 |       // Expect the function to throw a BalancingDataError
374 |       try {
375 |         await buildDesiredWalletByMode('marketcap_aum', baseDesired);
                    ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:375:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:356:73)


      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:379:23)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:356:73)
(fail) DesiredBuilder Module > Market Cap AUM Mode > should throw error when ticker has neither market cap nor AUM [1.00ms]
433 |       mockToRubFromAum.mockImplementation(async (aumEntry) => {
434 |         return aumEntry?.amount || 0;
435 |       });
436 | 
437 |       // Add a timeout to prevent hanging
438 |       const resultPromise = buildDesiredWalletByMode('decorrelation', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:438:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:385:60)
(fail) DesiredBuilder Module > Decorrelation Mode > should calculate decorrelation weights correctly [1.00ms]
472 |       try {
473 |         await buildDesiredWalletByMode('decorrelation', baseDesired);
474 |         // If we reach here, the test failed
475 |         expect(true).toBe(false);
476 |       } catch (error) {
477 |         expect(error).toBeInstanceOf(BalancingDataError);
                            ^
error: expect(received).toBeInstanceOf(expected)

Expected constructor: [class BalancingDataError extends Error]
Received value: 468 |         TMOS: 50
469 |       };
470 | 
471 |       // Expect the function to throw a BalancingDataError
472 |       try {
473 |         await buildDesiredWalletByMode('decorrelation', baseDesired);
                    ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:473:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:448:68)


      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:477:23)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:448:68)
(fail) DesiredBuilder Module > Decorrelation Mode > should require both market cap and AUM for decorrelation [1.00ms]
522 |       mockToRubFromAum.mockImplementation(async (aumEntry) => {
523 |         return aumEntry?.amount || 0;
524 |       });
525 | 
526 |       // Add a timeout to prevent hanging
527 |       const resultPromise = buildDesiredWalletByMode('decorrelation', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:527:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:481:62)
(fail) DesiredBuilder Module > Decorrelation Mode > should handle decorrelation calculation edge cases [1.00ms]
545 |         TMOS: 30,
546 |         TGLD: 20
547 |       };
548 | 
549 |       // Add a timeout to prevent hanging
550 |       const resultPromise = buildDesiredWalletByMode('manual', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:550:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:539:55)
(fail) DesiredBuilder Module > Error Handling and Edge Cases > should handle file system errors gracefully [1.00ms]
567 |         TRUR: 50,
568 |         TMOS: 50
569 |       };
570 | 
571 |       // Add a timeout to prevent hanging
572 |       const resultPromise = buildDesiredWalletByMode('manual', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:572:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:561:54)
(fail) DesiredBuilder Module > Error Handling and Edge Cases > should handle invalid JSON in metric files [1.00ms]
604 |         return result;
605 |       });
606 |       mockToRubFromAum.mockImplementation(async () => 0);
607 | 
608 |       // Add a timeout to prevent hanging
609 |       const resultPromise = buildDesiredWalletByMode('marketcap', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:609:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:583:52)
(fail) DesiredBuilder Module > Error Handling and Edge Cases > should handle zero total metric scenario [1.00ms]
620 |     }, 10000); // Increase timeout for this test
621 | 
622 |     it('should handle empty baseDesired wallet', async () => {
623 |       const baseDesired = {};
624 | 
625 |       const result = await buildDesiredWalletByMode('manual', baseDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:625:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:622:50)
(fail) DesiredBuilder Module > Error Handling and Edge Cases > should handle empty baseDesired wallet [1.00ms]
682 |       mockToRubFromAum.mockImplementation(async (aumEntry) => {
683 |         return aumEntry?.amount || 0;
684 |       });
685 | 
686 |       // Add a timeout to prevent hanging
687 |       const resultPromise = buildDesiredWalletByMode('marketcap', baseDesired);
                                  ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:687:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/desiredBuilder.test.ts:634:58)
(fail) DesiredBuilder Module > Position Metrics Generation > should generate comprehensive position metrics

src/__tests__/balancer/enhanced-desiredBuilder.test.ts:
25 |     TestEnvironment.teardown();
26 |   });
27 | 
28 |   describe('Manual and Default modes', () => {
29 |     it('should return baseDesired as-is for manual mode', async () => {
30 |       const result = await buildDesiredWalletByMode('manual', baseDesired);
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:30:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:29:59)
(fail) buildDesiredWalletByMode Enhanced Coverage > Manual and Default modes > should return baseDesired as-is for manual mode
33 |       expect(result.metrics).toEqual([]);
34 |       expect(result.modeApplied).toBe('manual');
35 |     });
36 | 
37 |     it('should return baseDesired as-is for default mode', async () => {
38 |       const result = await buildDesiredWalletByMode('default', baseDesired);
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:38:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:37:60)
(fail) buildDesiredWalletByMode Enhanced Coverage > Manual and Default modes > should return baseDesired as-is for default mode
45 | 
46 |   describe('Mode validation and data requirements', () => {
47 |     it('should handle marketcap mode with missing data gracefully', async () => {
48 |       // This will likely fail due to missing market cap data, which is expected behavior
49 |       await expect(
50 |         buildDesiredWalletByMode('marketcap', { NONEXISTENT: 100 })
             ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:50:9)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:47:69)
(fail) buildDesiredWalletByMode Enhanced Coverage > Mode validation and data requirements > should handle marketcap mode with missing data gracefully [1.00ms]
52 |     });
53 | 
54 |     it('should handle aum mode with missing data gracefully', async () => {
55 |       // This will likely fail due to missing AUM data, which is expected behavior
56 |       await expect(
57 |         buildDesiredWalletByMode('aum', { NONEXISTENT: 100 })
             ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:57:9)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:54:63)
(fail) buildDesiredWalletByMode Enhanced Coverage > Mode validation and data requirements > should handle aum mode with missing data gracefully
59 |     });
60 | 
61 |     it('should handle decorrelation mode requirements', async () => {
62 |       // This will likely fail due to missing both market cap and AUM data
63 |       await expect(
64 |         buildDesiredWalletByMode('decorrelation', { NONEXISTENT: 100 })
             ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:64:9)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:61:57)
(fail) buildDesiredWalletByMode Enhanced Coverage > Mode validation and data requirements > should handle decorrelation mode requirements [1.00ms]
66 |     });
67 | 
68 |     it('should handle marketcap_aum mode with fallback logic', async () => {
69 |       // This will likely fail due to missing data, but tests the validation logic
70 |       await expect(
71 |         buildDesiredWalletByMode('marketcap_aum', { NONEXISTENT: 100 })
             ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:71:9)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:68:64)
(fail) buildDesiredWalletByMode Enhanced Coverage > Mode validation and data requirements > should handle marketcap_aum mode with fallback logic [1.00ms]
85 |         // The specific error type depends on implementation
86 |       }
87 |     });
88 | 
89 |     it('should handle empty desired wallet', async () => {
90 |       const result = await buildDesiredWalletByMode('manual', {});
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:90:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:89:46)
(fail) buildDesiredWalletByMode Enhanced Coverage > Error handling scenarios > should handle empty desired wallet [1.00ms]
93 |       expect(result.modeApplied).toBe('manual');
94 |     });
95 | 
96 |     it('should handle single ticker scenarios', async () => {
97 |       const singleTicker = { TRUR: 100 };
98 |       const result = await buildDesiredWalletByMode('manual', singleTicker);
                                ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:98:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:96:49)
(fail) buildDesiredWalletByMode Enhanced Coverage > Error handling scenarios > should handle single ticker scenarios
111 |         TRND: 8.33,
112 |         TBRU: 8.33,
113 |         TDIV: 8.34  // Total: 50%
114 |       };
115 | 
116 |       const result = await buildDesiredWalletByMode('manual', complexDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:116:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:106:58)
(fail) buildDesiredWalletByMode Enhanced Coverage > Realistic test scenarios using actual tickers > should process multiple tickers in manual mode
118 |       expect(result.wallet).toEqual(complexDesired);
119 |       expect(Object.keys(result.wallet)).toHaveLength(6);
120 |     });
121 | 
122 |     it('should handle normalized ticker names', async () => {
123 |       const result = await buildDesiredWalletByMode('manual', baseDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:123:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:122:49)
(fail) buildDesiredWalletByMode Enhanced Coverage > Realistic test scenarios using actual tickers > should handle normalized ticker names [1.00ms]
132 |         TRUR: 33.333333,
133 |         TMOS: 33.333333,
134 |         TGLD: 33.333334
135 |       };
136 | 
137 |       const result = await buildDesiredWalletByMode('manual', preciseDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:137:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:130:48)
(fail) buildDesiredWalletByMode Enhanced Coverage > Realistic test scenarios using actual tickers > should preserve percentage precision [1.00ms]
142 |     });
143 |   });
144 | 
145 |   describe('Integration with metrics system', () => {
146 |     it('should return empty metrics array for manual mode', async () => {
147 |       const result = await buildDesiredWalletByMode('manual', baseDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:147:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:146:61)
(fail) buildDesiredWalletByMode Enhanced Coverage > Integration with metrics system > should return empty metrics array for manual mode
149 |       expect(Array.isArray(result.metrics)).toBe(true);
150 |       expect(result.metrics).toHaveLength(0);
151 |     });
152 | 
153 |     it('should return correct mode applied', async () => {
154 |       const manualResult = await buildDesiredWalletByMode('manual', baseDesired);
                                       ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:154:34)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:153:46)
(fail) buildDesiredWalletByMode Enhanced Coverage > Integration with metrics system > should return correct mode applied [1.00ms]
162 |       const zeroDesired = {
163 |         TRUR: 0,
164 |         TMOS: 100
165 |       };
166 | 
167 |       const result = await buildDesiredWalletByMode('manual', zeroDesired);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:167:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:161:57)
(fail) buildDesiredWalletByMode Enhanced Coverage > Integration with metrics system > should handle edge case with zero percentages
178 |         TRUR: 0.01,
179 |         TMOS: 0.02,
180 |         TGLD: 99.97
181 |       };
182 | 
183 |       const result = await buildDesiredWalletByMode('manual', smallPercentages);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:183:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:176:54)
(fail) buildDesiredWalletByMode Enhanced Coverage > Performance and boundary conditions > should handle very small percentage values [2.00ms]
191 |       const negativePercentages = {
192 |         TRUR: -10,
193 |         TMOS: 110
194 |       };
195 | 
196 |       const result = await buildDesiredWalletByMode('manual', negativePercentages);
                                 ^
ReferenceError: Cannot access 'buildDesiredWalletByMode' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:196:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/enhanced-desiredBuilder.test.ts:190:58)
(fail) buildDesiredWalletByMode Enhanced Coverage > Performance and boundary conditions > should handle negative percentages (edge case)

src/__tests__/balancer/min-profit-threshold-integration.test.ts:
109 | 
110 |       const result = await balancer(mockWallet, desiredWallet, [], 'manual', true);
111 | 
112 |       // Should not filter out any selling orders
113 |       const sellOrders = result.ordersPlanned?.filter(p => (p.toBuyLots || 0) < 0) || [];
114 |       expect(sellOrders).toHaveLength(3); // All 3 positions should be sellable
                               ^
error: expect(received).toHaveLength(expected)

Expected length: 3
Received length: 2

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/min-profit-threshold-integration.test.ts:114:26)
(fail) Balancer Integration - min_profit_percent_for_close_position > Without min_profit_percent_for_close_position > should allow all selling orders when threshold is not configured [5.00ms]
144 |       const tmos = result.ordersPlanned?.find(p => p.base === 'TMOS');
145 |       const tcsg = result.ordersPlanned?.find(p => p.base === 'TCSG');
146 |       const sber = result.ordersPlanned?.find(p => p.base === 'SBER');
147 | 
148 |       // TMOS: 25% profit -> should be allowed to sell
149 |       expect(tmos?.toBuyLots).toBeLessThan(0);
                                    ^
error: expect(received).toBeLessThan(expected)

Expected: < 0
Received: 32

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/min-profit-threshold-integration.test.ts:149:31)
(fail) Balancer Integration - min_profit_percent_for_close_position > With positive min_profit_percent_for_close_position threshold > should filter out positions that do not meet 20% profit threshold [3.00ms]
183 |       const tmos = result.ordersPlanned?.find(p => p.base === 'TMOS');
184 |       const tcsg = result.ordersPlanned?.find(p => p.base === 'TCSG');
185 |       const sber = result.ordersPlanned?.find(p => p.base === 'SBER');
186 | 
187 |       // TMOS: 25% profit -> should be allowed to sell
188 |       expect(tmos?.toBuyLots).toBeLessThan(0);
                                    ^
error: expect(received).toBeLessThan(expected)

Expected: < 0
Received: 32

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/min-profit-threshold-integration.test.ts:188:31)
(fail) Balancer Integration - min_profit_percent_for_close_position > With positive min_profit_percent_for_close_position threshold > should filter out positions that do not meet 15% profit threshold [2.00ms]
247 |       const result = await balancer(walletWithExactProfit, desiredWallet, [], 'manual', true);
248 | 
249 |       const tmos = result.ordersPlanned?.find(p => p.base === 'TMOS');
250 | 
251 |       // Should be allowed to sell (10% >= 10%)
252 |       expect(tmos?.toBuyLots).toBeLessThan(0);
                                    ^
error: expect(received).toBeLessThan(expected)

Expected: < 0
Received: 90

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/min-profit-threshold-integration.test.ts:252:31)
(fail) Balancer Integration - min_profit_percent_for_close_position > With positive min_profit_percent_for_close_position threshold > should allow positions that exactly meet the threshold [4.00ms]
321 | 
322 |       const tmos = result.ordersPlanned?.find(p => p.base === 'TMOS');
323 |       const tcsg = result.ordersPlanned?.find(p => p.base === 'TCSG');
324 | 
325 |       // TMOS: -3% loss -> should be allowed to sell (within -5% limit)
326 |       expect(tmos?.toBuyLots).toBeLessThan(0);
                                    ^
error: expect(received).toBeLessThan(expected)

Expected: < 0
Received: 24

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/min-profit-threshold-integration.test.ts:326:31)
(fail) Balancer Integration - min_profit_percent_for_close_position > With negative min_profit_percent_for_close_position (stop-loss) > should allow selling positions with losses within the stop-loss limit [4.00ms]
446 |       const result = await balancer(walletWithoutProfitData, desiredWallet, [], 'manual', true);
447 | 
448 |       const tmos = result.ordersPlanned?.find(p => p.base === 'TMOS');
449 | 
450 |       // Should block selling when profit data is not available
451 |       expect(tmos?.toBuyLots).toBe(0);
                                    ^
error: expect(received).toBe(expected)

Expected: 0
Received: 66

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/min-profit-threshold-integration.test.ts:451:31)
(fail) Balancer Integration - min_profit_percent_for_close_position > Edge cases > should handle positions without profit data gracefully [6.00ms]

src/__tests__/balancer/buy-requires-total-marginal-sell-comprehensive.test.ts:
67 |         totalPriceNumber: 900,
68 |         averagePositionPriceFifoNumber: 100, // Higher than current price
69 |       };
70 | 
71 |       const result = calculatePositionProfit(position);
72 |       expect(result).toBeNull();
                          ^
error: expect(received).toBeNull()

Received: {
  profitAmount: -100,
  profitPercent: -10,
  meetsThreshold: true,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/balancer/buy-requires-total-marginal-sell-comprehensive.test.ts:72:22)
(fail) Buy Requires Total Marginal Sell Comprehensive Tests > calculatePositionProfit > should return null for unprofitable positions [1.00ms]

src/__tests__/provider/order-execution-sequences.test.ts:
175 | 
176 |           // Verify execution order:
177 |           // 1. Sell orders first (TRUR, TMOS)
178 |           // 2. Buy non-margin orders (TGLD)
179 |           // 3. Remaining orders (TMON)
180 |           expect(executionOrder).toEqual([
                                       ^
error: expect(received).toEqual(expected)

- [
-   "TRUR:-2",
-   "TMOS:-1",
-   "TGLD:3",
-   "TMON:1",
- ]
+ []

- Expected  - 6
+ Received  + 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:180:34)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Dependencies > Buy Requires Total Marginal Sell Sequence > should execute sell orders before buy orders to ensure funds availability [2.00ms]
223 |           await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
224 |           const endTime = Date.now();
225 | 
226 |           // Should take at least some time due to the 5-second wait between phases
227 |           // plus the individual order processing times
228 |           expect(endTime - startTime).toBeGreaterThan(10);
                                            ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 10
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:228:39)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Dependencies > Buy Requires Total Marginal Sell Sequence > should wait for sell orders to complete before executing buy orders [1.00ms]
253 | 
254 |         try {
255 |           await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
256 | 
257 |           // Should still execute the remaining orders
258 |           expect(mockGenerateOrdersSequential).toHaveBeenCalledWith(sellsFirst, buysNonMarginFirst, remainingOrders);
                                                     ^
error: expect(received).toHaveBeenCalledWith(...expected)

Expected: [
  [], [], [
    {
      base: "TGLD",
      figi: "BBG004S687G5",
      amount: 1000,
      lotSize: 10,
      price: {
        units: 100,
        nano: 0,
      },
      priceNumber: 100,
      lotPrice: {
        units: 1000,
        nano: 0,
      },
      lotPriceNumber: 1000,
      totalPrice: {
        units: 100000,
        nano: 0,
      },
      totalPriceNumber: 100000,
      toBuyLots: 1,
    }
  ]
]
But it was not called.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:258:48)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Dependencies > Buy Requires Total Marginal Sell Sequence > should handle empty order groups gracefully [1.00ms]
300 | 
301 |         try {
302 |           await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
303 | 
304 |           // Verify that margin orders are handled in the remaining orders phase
305 |           expect(executionOrder).toEqual([
                                       ^
error: expect(received).toEqual(expected)

- [
-   "TRUR:-1",
-   "TGLD:2",
-   "TMON:1:margin",
- ]
+ []

- Expected  - 5
+ Received  + 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:305:34)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Dependencies > Margin Trading Order Dependencies > should handle margin position transfers with proper sequencing [2.00ms]
355 | 
356 |         try {
357 |           await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
358 | 
359 |           // Verify execution order with multiple margin positions
360 |           expect(executionOrder).toEqual([
                                       ^
error: expect(received).toEqual(expected)

- [
-   "TRUR:-2",
-   "TGLD:1",
-   "TMON:1:margin",
-   "TMOS:1:margin",
- ]
+ []

- Expected  - 6
+ Received  + 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:360:34)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Dependencies > Margin Trading Order Dependencies > should properly sequence multiple margin positions [1.00ms]
401 | 
402 |       try {
403 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
404 | 
405 |         // Verify that sell orders were executed
406 |         expect(mockGenerateOrder).toHaveBeenCalledWith(sellsFirst[0]);
                                        ^
error: expect(received).toHaveBeenCalledWith(...expected)

Expected: [
  {
    base: "TRUR",
    figi: "BBG004S68614",
    amount: 1000,
    lotSize: 10,
    price: {
      units: 100,
      nano: 0,
    },
    priceNumber: 100,
    lotPrice: {
      units: 1000,
      nano: 0,
    },
    lotPriceNumber: 1000,
    totalPrice: {
      units: 100000,
      nano: 0,
    },
    totalPriceNumber: 100000,
    toBuyLots: -3,
  }
]
But it was not called.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:406:35)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Phases > should execute Phase 1: Sell orders with proper logging [1.00ms]
449 | 
450 |       try {
451 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
452 | 
453 |         // Verify execution order
454 |         expect(executionOrder).toEqual(['TRUR', 'TGLD']);
                                     ^
error: expect(received).toEqual(expected)

- [
-   "TRUR",
-   "TGLD",
- ]
+ []

- Expected  - 4
+ Received  + 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:454:32)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Phases > should execute Phase 2: Non-margin buy orders after sell completion
493 | 
494 |       try {
495 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
496 | 
497 |         // Verify that remaining orders are executed in Phase 3
498 |         expect(executionOrder).toEqual(['TGLD', 'TMON']);
                                     ^
error: expect(received).toEqual(expected)

- [
-   "TGLD",
-   "TMON",
- ]
+ []

- Expected  - 4
+ Received  + 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:498:32)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Phases > should execute Phase 3: Remaining orders last [4.00ms]
542 |         const testStartTime = Date.now();
543 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
544 |         const testEndTime = Date.now();
545 | 
546 |         // Should take at least 5 seconds due to the wait plus processing time
547 |         expect(testEndTime - testStartTime).toBeGreaterThanOrEqual(5000);
                                                  ^
error: expect(received).toBeGreaterThanOrEqual(expected)

Expected: >= 5000
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:547:45)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Timing > should respect the 5-second wait time between sell and buy phases [2.00ms]
590 | 
591 |       try {
592 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
593 | 
594 |         // Should have executed both sell orders
595 |         expect(orderExecutionTimes).toHaveLength(2);
                                          ^
error: expect(received).toHaveLength(expected)

Expected length: 2
Received length: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:595:37)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Timing > should handle rapid execution of orders within the same phase [2.00ms]
646 | 
647 |       try {
648 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
649 | 
650 |         // Should still attempt all orders despite the failure
651 |         expect(attemptedOrders).toContain('TRUR'); // Failed order
                                      ^
error: expect(received).toContain(expected)

Expected to contain: "TRUR"
Received: []

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:651:33)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Error Handling in Sequences > should continue with the sequence even if one order fails [1.00ms]
697 | 
698 |       try {
699 |         await generateOrdersSequential(sellsFirst, buysNonMarginFirst, remainingOrders);
700 | 
701 |         // Should still maintain the correct sequence even with failures
702 |         expect(executionOrder).toEqual(['TRUR', 'TGLD', 'TMON']);
                                     ^
error: expect(received).toEqual(expected)

- [
-   "TRUR",
-   "TGLD",
-   "TMON",
- ]
+ []

- Expected  - 5
+ Received  + 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:702:32)
(fail) Provider Module Order Execution Sequences Tests > Order Execution Error Handling in Sequences > should maintain sequence integrity when orders fail [1.00ms]
743 |       try {
744 |         // Call generateOrders which should delegate to generateOrdersSequential for buy_requires_total_marginal_sell
745 |         await generateOrders(wallet);
746 | 
747 |         // Verify that generateOrdersSequential was called
748 |         expect(mockGenerateOrdersSequential).toHaveBeenCalled();
                                                   ^
error: expect(received).toHaveBeenCalled()

Expected number of calls: >= 1
Received number of calls: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:748:46)
(fail) Provider Module Order Execution Sequences Tests > Integration with buy_requires_total_marginal_sell Feature > should properly handle the buy_requires_total_marginal_sell configuration [2.00ms]
791 |       const sellsFirst = wallet.filter(pos => pos.toBuyLots! < 0);
792 |       const buysNonMarginFirst = wallet.filter(pos => pos.toBuyLots! > 0 && !pos.isMargin);
793 |       const remainingOrders = wallet.filter(pos => pos.isMargin);
794 | 
795 |       expect(sellsFirst).toHaveLength(2);
796 |       expect(buysNonMarginFirst).toHaveLength(1);
                                       ^
error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 2

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:796:34)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/order-execution-sequences.test.ts:755:83)
(fail) Provider Module Order Execution Sequences Tests > Integration with buy_requires_total_marginal_sell Feature > should correctly categorize orders for buy_requires_total_marginal_sell [3.00ms]

src/__tests__/provider/provider-order-execution.test.ts:
429 |   });
430 | 
431 |   describe('Order Execution Error Handling', () => {
432 |     describe('Individual Order Failures', () => {
433 |       it('should continue processing other orders when one order fails', async () => {
434 |         mockTinkoffSDKControls.simulateInsufficientFunds();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInsufficientFunds is not a function. (In 'mockTinkoffSDKControls.simulateInsufficientFunds()', 'mockTinkoffSDKControls.simulateInsufficientFunds' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-order-execution.test.ts:434:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-order-execution.test.ts:433:86)
(fail) Provider Module Order Execution Tests > Order Execution Error Handling > Individual Order Failures > should continue processing other orders when one order fails [1.00ms]
452 | 
453 |         expect(mockGenerateOrders).toHaveBeenCalledWith(wallet);
454 |       });
455 | 
456 |       it('should log errors for failed orders but not stop execution', async () => {
457 |         mockTinkoffSDKControls.simulateOrderRejection();
                                     ^
TypeError: mockTinkoffSDKControls.simulateOrderRejection is not a function. (In 'mockTinkoffSDKControls.simulateOrderRejection()', 'mockTinkoffSDKControls.simulateOrderRejection' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-order-execution.test.ts:457:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-order-execution.test.ts:456:84)
(fail) Provider Module Order Execution Tests > Order Execution Error Handling > Individual Order Failures > should log errors for failed orders but not stop execution
506 | 
507 |         await expect(mockGenerateOrder()).rejects.toThrow('UNAUTHENTICATED');
508 |       });
509 | 
510 |       it('should handle insufficient funds errors gracefully', async () => {
511 |         mockTinkoffSDKControls.simulateInsufficientFunds();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInsufficientFunds is not a function. (In 'mockTinkoffSDKControls.simulateInsufficientFunds()', 'mockTinkoffSDKControls.simulateInsufficientFunds' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-order-execution.test.ts:511:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-order-execution.test.ts:510:76)
(fail) Provider Module Order Execution Tests > Order Execution Error Handling > API Error Recovery > should handle insufficient funds errors gracefully [1.00ms]

src/__tests__/provider/market-closure-scenarios.test.ts:
133 |       expect(isOpen).toBe(false);
134 |     });
135 | 
136 |     it('should handle API errors when checking exchange status', async () => {
137 |       mockIsExchangeOpenNow.mockImplementation(async () => {
138 |         throw new Error('API timeout');
                        ^
error: API timeout
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:138:19)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:137:60)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:142:28)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:136:66)
(fail) Provider Module Market Closure Scenarios Tests > Exchange Closure Detection > should handle API errors when checking exchange status [1.00ms]
180 |           balancingExecuted.push(true);
181 |           return Promise.resolve();
182 |         });
183 | 
184 |         try {
185 |           await provider({ runOnce: true });
                      ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:185:17)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:173:94)
(fail) Provider Module Market Closure Scenarios Tests > Market Closure Behavior Modes > Skip Iteration Mode > should skip balancing when exchange is closed in skip_iteration mode
202 |           balancingExecuted.push(true);
203 |           return Promise.resolve();
204 |         });
205 | 
206 |         try {
207 |           await provider({ runOnce: true });
                      ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:207:17)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:195:100)
(fail) Provider Module Market Closure Scenarios Tests > Market Closure Behavior Modes > Skip Iteration Mode > should proceed with balancing when exchange is open in skip_iteration mode [1.00ms]
240 |           ordersGenerated.push(wallet);
241 |           return Promise.resolve();
242 |         });
243 | 
244 |         try {
245 |           await provider({ runOnce: true });
                      ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:245:17)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:233:114)
(fail) Provider Module Market Closure Scenarios Tests > Market Closure Behavior Modes > Dry Run Mode > should perform calculations but not place orders when exchange is closed in dry_run mode [1.00ms]
289 |           ordersGenerated.push(wallet);
290 |           return Promise.resolve();
291 |         });
292 | 
293 |         try {
294 |           await provider({ runOnce: true });
                      ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:294:17)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:282:106)
(fail) Provider Module Market Closure Scenarios Tests > Market Closure Behavior Modes > Force Orders Mode > should attempt to place orders even when exchange is closed in force_orders mode [2.00ms]
304 |       it('should handle API errors gracefully when forcing orders during market closure', async () => {
305 |         mockIsExchangeOpenNow.mockResolvedValue(false);
306 |         mockTinkoffSDKControls.simulateUnauthorized();
307 | 
308 |         // Should not throw errors but handle them gracefully
309 |         await expect(provider({ runOnce: true })).resolves.not.toThrow();
                           ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:309:22)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:304:103)
(fail) Provider Module Market Closure Scenarios Tests > Market Closure Behavior Modes > Force Orders Mode > should handle API errors gracefully when forcing orders during market closure [1.00ms]
326 |       mockControls.fs.setFile('/test/workspace/CONFIG.json', JSON.stringify(mockConfig, null, 2));
327 | 
328 |       mockIsExchangeOpenNow.mockResolvedValue(false);
329 | 
330 |       // Should not throw errors but use default behavior
331 |       await expect(provider({ runOnce: true })).resolves.not.toThrow();
                         ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:331:20)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:315:67)
(fail) Provider Module Market Closure Scenarios Tests > Edge Cases and Error Handling > should handle invalid exchange closure modes gracefully [2.00ms]
342 |       mockControls.fs.setFile('/test/workspace/CONFIG.json', JSON.stringify(mockConfig, null, 2));
343 | 
344 |       mockIsExchangeOpenNow.mockResolvedValue(false);
345 | 
346 |       // Should use default behavior (likely skip_iteration)
347 |       await expect(provider({ runOnce: true })).resolves.not.toThrow();
                         ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:347:20)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:334:73)
(fail) Provider Module Market Closure Scenarios Tests > Edge Cases and Error Handling > should handle missing exchange_closure_behavior configuration [2.00ms]
361 |       mockControls.fs.setFile('/test/workspace/CONFIG.json', JSON.stringify(mockConfig, null, 2));
362 | 
363 |       mockIsExchangeOpenNow.mockResolvedValue(false);
364 | 
365 |       // Should handle gracefully and use defaults
366 |       await expect(provider({ runOnce: true })).resolves.not.toThrow();
                         ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:366:20)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:350:75)
(fail) Provider Module Market Closure Scenarios Tests > Edge Cases and Error Handling > should handle malformed exchange_closure_behavior configuration [2.00ms]
481 | 
482 |       try {
483 |         await generateOrders(wallet);
484 | 
485 |         // Should place orders when exchange is open
486 |         expect(orderCalls).toHaveLength(1);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:486:28)
(fail) Provider Module Market Closure Scenarios Tests > Integration with Order Execution > should allow order execution when exchange is open [2.00ms]
508 |       };
509 |       mockControls.fs.setFile('/test/workspace/CONFIG.json', JSON.stringify(mockConfig, null, 2));
510 | 
511 |       // Track resource usage (simplified for testing)
512 |       const startTime = Date.now();
513 |       await provider({ runOnce: true });
                  ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:513:13)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:496:97)
(fail) Provider Module Market Closure Scenarios Tests > Performance and Resource Management > should not consume excessive resources when skipping iterations due to market closure [1.00ms]
556 |       console.log = (...args: any[]) => {
557 |         consoleOutput.push(args.join(' '));
558 |       };
559 | 
560 |       try {
561 |         await provider({ runOnce: true });
                    ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:561:15)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:538:87)
(fail) Provider Module Market Closure Scenarios Tests > Logging and Diagnostics > should provide clear logging when skipping iterations due to market closure [1.00ms]
594 |         console.log = (...args: any[]) => {
595 |           consoleOutput.push(args.join(' '));
596 |         };
597 | 
598 |         try {
599 |           await provider({ runOnce: true });
                      ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:599:17)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/market-closure-scenarios.test.ts:573:74)
(fail) Provider Module Market Closure Scenarios Tests > Logging and Diagnostics > should log appropriate messages for each exchange closure mode [1.00ms]

src/__tests__/provider/provider-api-integration.test.ts:
339 |       // Mock getPositionsCycle to resolve immediately
340 |       mockGetPositionsCycle.mockImplementation(async (options?: { runOnce?: boolean }) => {
341 |         return Promise.resolve();
342 |       });
343 | 
344 |       await provider({ runOnce: true });
                  ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-integration.test.ts:344:13)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-integration.test.ts:330:75)
(fail) Provider Module API Integration Tests > Provider Main Function API Integration > should initialize provider with correct account and instruments [2.00ms]

src/__tests__/provider/provider-api-error-propagation.test.ts:
123 |         // Should not reach here
124 |         expect(true).toBe(false);
125 |       } catch (error: any) {
126 |         // Verify error propagation
127 |         expect(error).toBeDefined();
128 |         expect(error.message).toContain('UNAUTHENTICATED');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "UNAUTHENTICATED"
Received: "Cannot access 'provider' before initialization."

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:128:31)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:115:100)
(fail) Provider Module API Error Propagation Tests > Error Propagation Through Call Stack > should propagate authentication errors from getAccountId through provider initialization [1.00ms]
144 |         // Should not reach here
145 |         expect(true).toBe(false);
146 |       } catch (error: any) {
147 |         // Verify error propagation
148 |         expect(error).toBeDefined();
149 |         expect(error.message).toContain('DEADLINE_EXCEEDED');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "DEADLINE_EXCEEDED"
Received: "Cannot access 'provider' before initialization."

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:149:31)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:136:77)
(fail) Provider Module API Error Propagation Tests > Error Propagation Through Call Stack > should propagate network timeout errors through the entire system
186 |   });
187 | 
188 |   describe('Error Context Preservation', () => {
189 |     it('should preserve error context information during propagation', async () => {
190 |       // Simulate internal server error with context
191 |       mockTinkoffSDKControls.simulateInternalServerError();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInternalServerError is not a function. (In 'mockTinkoffSDKControls.simulateInternalServerError()', 'mockTinkoffSDKControls.simulateInternalServerError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:191:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:189:72)
(fail) Provider Module API Error Propagation Tests > Error Context Preservation > should preserve error context information during propagation
208 |       }
209 |     });
210 | 
211 |     it('should include relevant identifiers in error messages', async () => {
212 |       // Simulate invalid argument error with specific identifier
213 |       mockTinkoffSDKControls.simulateInvalidArgument();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInvalidArgument is not a function. (In 'mockTinkoffSDKControls.simulateInvalidArgument()', 'mockTinkoffSDKControls.simulateInvalidArgument' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:213:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:211:65)
(fail) Provider Module API Error Propagation Tests > Error Context Preservation > should include relevant identifiers in error messages
226 |       }
227 |     });
228 | 
229 |     it('should maintain error codes during propagation', async () => {
230 |       // Simulate permission denied error with code
231 |       mockTinkoffSDKControls.simulatePermissionDenied();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePermissionDenied is not a function. (In 'mockTinkoffSDKControls.simulatePermissionDenied()', 'mockTinkoffSDKControls.simulatePermissionDenied' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:231:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:229:58)
(fail) Provider Module API Error Propagation Tests > Error Context Preservation > should maintain error codes during propagation [1.00ms]
246 |   });
247 | 
248 |   describe('Error Transformation and Wrapping', () => {
249 |     it('should wrap low-level errors with meaningful context', async () => {
250 |       // Simulate low-level network error
251 |       mockTinkoffSDKControls.simulateConnectionFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulateConnectionFailure is not a function. (In 'mockTinkoffSDKControls.simulateConnectionFailure()', 'mockTinkoffSDKControls.simulateConnectionFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:251:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:249:64)
(fail) Provider Module API Error Propagation Tests > Error Transformation and Wrapping > should wrap low-level errors with meaningful context [1.00ms]
267 |       }
268 |     });
269 | 
270 |     it('should transform technical error messages into user-friendly ones', async () => {
271 |       // Simulate technical error with cryptic message
272 |       mockTinkoffSDKControls.simulateInternalServerError();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInternalServerError is not a function. (In 'mockTinkoffSDKControls.simulateInternalServerError()', 'mockTinkoffSDKControls.simulateInternalServerError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:272:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:270:77)
(fail) Provider Module API Error Propagation Tests > Error Transformation and Wrapping > should transform technical error messages into user-friendly ones [1.00ms]
307 |       expect(typeof mockGetLastPrice).toBe('function');
308 |     });
309 | 
310 |     it('should fall back to cached data when API errors occur', async () => {
311 |       // Simulate API failure with cached data available
312 |       mockTinkoffSDKControls.simulateConnectionFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulateConnectionFailure is not a function. (In 'mockTinkoffSDKControls.simulateConnectionFailure()', 'mockTinkoffSDKControls.simulateConnectionFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:312:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:310:65)
(fail) Provider Module API Error Propagation Tests > Error Recovery and Fallback Behavior > should fall back to cached data when API errors occur [1.00ms]
330 |   });
331 | 
332 |   describe('Cross-Component Error Propagation', () => {
333 |     it('should propagate errors between market data and order execution components', async () => {
334 |       // Simulate error in market data component affecting order execution
335 |       mockTinkoffSDKControls.simulateInvalidArgument();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInvalidArgument is not a function. (In 'mockTinkoffSDKControls.simulateInvalidArgument()', 'mockTinkoffSDKControls.simulateInvalidArgument' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:335:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:333:86)
(fail) Provider Module API Error Propagation Tests > Cross-Component Error Propagation > should propagate errors between market data and order execution components [1.00ms]
363 |       }
364 |     });
365 | 
366 |     it('should propagate errors from exchange status to order execution', async () => {
367 |       // Simulate exchange status error affecting order execution
368 |       mockTinkoffSDKControls.simulateServiceUnavailable();
                                   ^
TypeError: mockTinkoffSDKControls.simulateServiceUnavailable is not a function. (In 'mockTinkoffSDKControls.simulateServiceUnavailable()', 'mockTinkoffSDKControls.simulateServiceUnavailable' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:368:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:366:75)
(fail) Provider Module API Error Propagation Tests > Cross-Component Error Propagation > should propagate errors from exchange status to order execution [1.00ms]
400 |         // Should not reach here
401 |         expect(true).toBe(false);
402 |       } catch (error: any) {
403 |         // Verify error was logged
404 |         expect(error).toBeDefined();
405 |         expect(loggedErrors.length).toBeGreaterThan(0);
                                          ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:405:37)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:385:63)
(fail) Provider Module API Error Propagation Tests > Error Logging and Monitoring Integration > should log errors with correlation IDs for tracking [1.00ms]
427 |         // Should not reach here
428 |         expect(true).toBe(false);
429 |       } catch (error: any) {
430 |         // Verify contextual logging
431 |         expect(error).toBeDefined();
432 |         expect(loggedErrors.length).toBeGreaterThan(0);
                                          ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:432:37)
(fail) Provider Module API Error Propagation Tests > Error Logging and Monitoring Integration > should include contextual information in error logs
476 |       expect(rejected.length).toBeGreaterThan(0);
477 |     });
478 | 
479 |     it('should maintain system stability when individual operations fail', async () => {
480 |       // Test that system continues to function even when some operations fail
481 |       mockTinkoffSDKControls.simulatePartialFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePartialFailure is not a function. (In 'mockTinkoffSDKControls.simulatePartialFailure()', 'mockTinkoffSDKControls.simulatePartialFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:481:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-propagation.test.ts:479:76)
(fail) Provider Module API Error Propagation Tests > Error Handling in Concurrent Operations > should maintain system stability when individual operations fail [1.00ms]

src/__tests__/provider/provider-network-retry-logic.test.ts:
116 |       // Test that retries follow exponential backoff pattern (1s, 2s, 4s, 8s, etc.)
117 |       let callCount = 0;
118 |       const retryDelays: number[] = [];
119 |       let lastCallTime = Date.now();
120 | 
121 |       mockTinkoffSDKControls.simulateTransientError();
                                   ^
TypeError: mockTinkoffSDKControls.simulateTransientError is not a function. (In 'mockTinkoffSDKControls.simulateTransientError()', 'mockTinkoffSDKControls.simulateTransientError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:121:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:115:62)
(fail) Provider Module Network Retry Logic Tests > Exponential Backoff Retry Logic > should implement proper exponential backoff timing [2.00ms]
148 | 
149 |     it('should cap maximum retry delay', async () => {
150 |       // Test that retry delays don't exceed a maximum threshold
151 |       let callCount = 0;
152 | 
153 |       mockTinkoffSDKControls.simulatePersistentTransientError();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePersistentTransientError is not a function. (In 'mockTinkoffSDKControls.simulatePersistentTransientError()', 'mockTinkoffSDKControls.simulatePersistentTransientError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:153:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:149:42)
(fail) Provider Module Network Retry Logic Tests > Exponential Backoff Retry Logic > should cap maximum retry delay [1.00ms]
170 |     it('should reset backoff counter after successful call', async () => {
171 |       // Test that successful calls reset the backoff counter
172 |       let callCount = 0;
173 |       let failureSequence = 0;
174 | 
175 |       mockTinkoffSDKControls.simulateIntermittentSuccess();
                                   ^
TypeError: mockTinkoffSDKControls.simulateIntermittentSuccess is not a function. (In 'mockTinkoffSDKControls.simulateIntermittentSuccess()', 'mockTinkoffSDKControls.simulateIntermittentSuccess' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:175:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:170:62)
(fail) Provider Module Network Retry Logic Tests > Exponential Backoff Retry Logic > should reset backoff counter after successful call
201 |   describe('Retry Attempt Limiting', () => {
202 |     it('should limit retry attempts to prevent infinite loops', async () => {
203 |       // Test that there's a maximum number of retry attempts (e.g., 5 attempts)
204 |       let callCount = 0;
205 | 
206 |       mockTinkoffSDKControls.simulatePersistentError();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePersistentError is not a function. (In 'mockTinkoffSDKControls.simulatePersistentError()', 'mockTinkoffSDKControls.simulatePersistentError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:206:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:202:65)
(fail) Provider Module Network Retry Logic Tests > Retry Attempt Limiting > should limit retry attempts to prevent infinite loops [1.00ms]
215 | 
216 |     it('should allow configuration of maximum retry attempts', async () => {
217 |       // Test that retry limit can be configured
218 |       let callCount = 0;
219 | 
220 |       mockTinkoffSDKControls.simulateConfigurableRetryLimit();
                                   ^
TypeError: mockTinkoffSDKControls.simulateConfigurableRetryLimit is not a function. (In 'mockTinkoffSDKControls.simulateConfigurableRetryLimit()', 'mockTinkoffSDKControls.simulateConfigurableRetryLimit' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:220:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:216:64)
(fail) Provider Module Network Retry Logic Tests > Retry Attempt Limiting > should allow configuration of maximum retry attempts [1.00ms]
230 | 
231 |     it('should differentiate between retryable and non-retryable errors', async () => {
232 |       // Test that only certain errors trigger retries
233 |       let callCount = 0;
234 | 
235 |       mockTinkoffSDKControls.simulateMixedErrorTypes();
                                   ^
TypeError: mockTinkoffSDKControls.simulateMixedErrorTypes is not a function. (In 'mockTinkoffSDKControls.simulateMixedErrorTypes()', 'mockTinkoffSDKControls.simulateMixedErrorTypes' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:235:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:231:75)
(fail) Provider Module Network Retry Logic Tests > Retry Attempt Limiting > should differentiate between retryable and non-retryable errors [1.00ms]
258 |       // Test that retry intervals include randomization to prevent thundering herd
259 |       let callCount = 0;
260 |       const retryIntervals: number[] = [];
261 |       let lastCallTime = Date.now();
262 | 
263 |       mockTinkoffSDKControls.simulateRetryWithJitter();
                                   ^
TypeError: mockTinkoffSDKControls.simulateRetryWithJitter is not a function. (In 'mockTinkoffSDKControls.simulateRetryWithJitter()', 'mockTinkoffSDKControls.simulateRetryWithJitter' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:263:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:257:55)
(fail) Provider Module Network Retry Logic Tests > Retry with Jitter > should add random jitter to retry intervals
289 | 
290 |     it('should maintain minimum and maximum jitter bounds', async () => {
291 |       // Test that jitter stays within reasonable bounds
292 |       let callCount = 0;
293 | 
294 |       mockTinkoffSDKControls.simulateBoundedJitter();
                                   ^
TypeError: mockTinkoffSDKControls.simulateBoundedJitter is not a function. (In 'mockTinkoffSDKControls.simulateBoundedJitter()', 'mockTinkoffSDKControls.simulateBoundedJitter' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:294:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:290:61)
(fail) Provider Module Network Retry Logic Tests > Retry with Jitter > should maintain minimum and maximum jitter bounds [1.00ms]
312 |   describe('Retry Logic for Different API Operations', () => {
313 |     it('should implement appropriate retry logic for account operations', async () => {
314 |       // Test retry logic specifically for account-related operations
315 |       let callCount = 0;
316 | 
317 |       mockTinkoffSDKControls.simulateAccountOperationRetry();
                                   ^
TypeError: mockTinkoffSDKControls.simulateAccountOperationRetry is not a function. (In 'mockTinkoffSDKControls.simulateAccountOperationRetry()', 'mockTinkoffSDKControls.simulateAccountOperationRetry' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:317:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:313:75)
(fail) Provider Module Network Retry Logic Tests > Retry Logic for Different API Operations > should implement appropriate retry logic for account operations [1.00ms]
331 | 
332 |     it('should implement appropriate retry logic for market data operations', async () => {
333 |       // Test retry logic specifically for market data operations
334 |       let callCount = 0;
335 | 
336 |       mockTinkoffSDKControls.simulateMarketDataRetry();
                                   ^
TypeError: mockTinkoffSDKControls.simulateMarketDataRetry is not a function. (In 'mockTinkoffSDKControls.simulateMarketDataRetry()', 'mockTinkoffSDKControls.simulateMarketDataRetry' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:336:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:332:79)
(fail) Provider Module Network Retry Logic Tests > Retry Logic for Different API Operations > should implement appropriate retry logic for market data operations
351 | 
352 |     it('should implement appropriate retry logic for order operations', async () => {
353 |       // Test retry logic specifically for order operations
354 |       let callCount = 0;
355 | 
356 |       mockTinkoffSDKControls.simulateOrderOperationRetry();
                                   ^
TypeError: mockTinkoffSDKControls.simulateOrderOperationRetry is not a function. (In 'mockTinkoffSDKControls.simulateOrderOperationRetry()', 'mockTinkoffSDKControls.simulateOrderOperationRetry' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:356:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:352:73)
(fail) Provider Module Network Retry Logic Tests > Retry Logic for Different API Operations > should implement appropriate retry logic for order operations [1.00ms]
377 |   });
378 | 
379 |   describe('Retry Logic Performance', () => {
380 |     it('should not significantly impact performance for successful operations', async () => {
381 |       // Test that retry logic doesn't add significant overhead for successful operations
382 |       mockTinkoffSDKControls.simulateNoRetryNeeded();
                                   ^
TypeError: mockTinkoffSDKControls.simulateNoRetryNeeded is not a function. (In 'mockTinkoffSDKControls.simulateNoRetryNeeded()', 'mockTinkoffSDKControls.simulateNoRetryNeeded' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:382:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:380:81)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Performance > should not significantly impact performance for successful operations [1.00ms]
393 | 
394 |     it('should handle retry backpressure appropriately', async () => {
395 |       // Test that retry logic respects system backpressure
396 |       let callCount = 0;
397 | 
398 |       mockTinkoffSDKControls.simulateBackpressureRetry();
                                   ^
TypeError: mockTinkoffSDKControls.simulateBackpressureRetry is not a function. (In 'mockTinkoffSDKControls.simulateBackpressureRetry()', 'mockTinkoffSDKControls.simulateBackpressureRetry' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:398:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:394:58)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Performance > should handle retry backpressure appropriately
412 | 
413 |     it('should implement efficient retry state management', async () => {
414 |       // Test that retry state is managed efficiently
415 |       let callCount = 0;
416 | 
417 |       mockTinkoffSDKControls.simulateEfficientRetryState();
                                   ^
TypeError: mockTinkoffSDKControls.simulateEfficientRetryState is not a function. (In 'mockTinkoffSDKControls.simulateEfficientRetryState()', 'mockTinkoffSDKControls.simulateEfficientRetryState' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:417:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:413:61)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Performance > should implement efficient retry state management [1.00ms]
443 |   describe('Retry Logic Error Handling', () => {
444 |     it('should provide clear error messages when retries are exhausted', async () => {
445 |       // Test that final error messages indicate retry exhaustion
446 |       let callCount = 0;
447 | 
448 |       mockTinkoffSDKControls.simulateRetryExhaustion();
                                   ^
TypeError: mockTinkoffSDKControls.simulateRetryExhaustion is not a function. (In 'mockTinkoffSDKControls.simulateRetryExhaustion()', 'mockTinkoffSDKControls.simulateRetryExhaustion' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:448:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:444:74)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Error Handling > should provide clear error messages when retries are exhausted [1.00ms]
464 | 
465 |     it('should preserve original error context during retries', async () => {
466 |       // Test that error context is preserved through retry attempts
467 |       let callCount = 0;
468 | 
469 |       mockTinkoffSDKControls.simulateContextPreservation();
                                   ^
TypeError: mockTinkoffSDKControls.simulateContextPreservation is not a function. (In 'mockTinkoffSDKControls.simulateContextPreservation()', 'mockTinkoffSDKControls.simulateContextPreservation' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:469:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:465:65)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Error Handling > should preserve original error context during retries [1.00ms]
483 |       }
484 |     });
485 | 
486 |     it('should handle errors in retry timing logic', async () => {
487 |       // Test graceful handling of errors in retry timing calculations
488 |       mockTinkoffSDKControls.simulateRetryTimingError();
                                   ^
TypeError: mockTinkoffSDKControls.simulateRetryTimingError is not a function. (In 'mockTinkoffSDKControls.simulateRetryTimingError()', 'mockTinkoffSDKControls.simulateRetryTimingError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:488:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:486:54)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Error Handling > should handle errors in retry timing logic
496 |   describe('Retry Logic Integration', () => {
497 |     it('should integrate properly with circuit breaker patterns', async () => {
498 |       // Test that retry logic works correctly with circuit breakers
499 |       let callCount = 0;
500 | 
501 |       mockTinkoffSDKControls.simulateRetryWithCircuitBreaker();
                                   ^
TypeError: mockTinkoffSDKControls.simulateRetryWithCircuitBreaker is not a function. (In 'mockTinkoffSDKControls.simulateRetryWithCircuitBreaker()', 'mockTinkoffSDKControls.simulateRetryWithCircuitBreaker' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:501:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:497:67)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Integration > should integrate properly with circuit breaker patterns
515 | 
516 |     it('should handle retry logic during system initialization', async () => {
517 |       // Test that retry logic works during system initialization
518 |       let callCount = 0;
519 | 
520 |       mockTinkoffSDKControls.simulateInitRetry();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInitRetry is not a function. (In 'mockTinkoffSDKControls.simulateInitRetry()', 'mockTinkoffSDKControls.simulateInitRetry' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:520:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-retry-logic.test.ts:516:66)
(fail) Provider Module Network Retry Logic Tests > Retry Logic Integration > should handle retry logic during system initialization

src/__tests__/provider/provider-network-resilience.test.ts:
112 |   });
113 | 
114 |   describe('Network Timeout Scenarios', () => {
115 |     describe('Short Timeouts', () => {
116 |       it('should handle 1-second timeouts gracefully', async () => {
117 |         mockTinkoffSDKControls.simulateShortTimeout(1000);
                                     ^
TypeError: mockTinkoffSDKControls.simulateShortTimeout is not a function. (In 'mockTinkoffSDKControls.simulateShortTimeout(1000)', 'mockTinkoffSDKControls.simulateShortTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:117:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:116:68)
(fail) Provider Module Network Resilience Tests > Network Timeout Scenarios > Short Timeouts > should handle 1-second timeouts gracefully [1.00ms]
119 | 
120 |         await expect(getAccountId('0')).rejects.toThrow('DEADLINE_EXCEEDED');
121 |       });
122 | 
123 |       it('should handle 5-second timeouts gracefully', async () => {
124 |         mockTinkoffSDKControls.simulateShortTimeout(5000);
                                     ^
TypeError: mockTinkoffSDKControls.simulateShortTimeout is not a function. (In 'mockTinkoffSDKControls.simulateShortTimeout(5000)', 'mockTinkoffSDKControls.simulateShortTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:124:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:123:68)
(fail) Provider Module Network Resilience Tests > Network Timeout Scenarios > Short Timeouts > should handle 5-second timeouts gracefully
128 |       });
129 |     });
130 | 
131 |     describe('Long Timeouts', () => {
132 |       it('should handle 30-second timeouts gracefully', async () => {
133 |         mockTinkoffSDKControls.simulateLongTimeout(30000);
                                     ^
TypeError: mockTinkoffSDKControls.simulateLongTimeout is not a function. (In 'mockTinkoffSDKControls.simulateLongTimeout(30000)', 'mockTinkoffSDKControls.simulateLongTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:133:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:132:69)
(fail) Provider Module Network Resilience Tests > Network Timeout Scenarios > Long Timeouts > should handle 30-second timeouts gracefully
135 | 
136 |         await expect(getAccountId('0')).rejects.toThrow('DEADLINE_EXCEEDED');
137 |       });
138 | 
139 |       it('should handle 60-second timeouts gracefully', async () => {
140 |         mockTinkoffSDKControls.simulateLongTimeout(60000);
                                     ^
TypeError: mockTinkoffSDKControls.simulateLongTimeout is not a function. (In 'mockTinkoffSDKControls.simulateLongTimeout(60000)', 'mockTinkoffSDKControls.simulateLongTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:140:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:139:69)
(fail) Provider Module Network Resilience Tests > Network Timeout Scenarios > Long Timeouts > should handle 60-second timeouts gracefully
146 | 
147 |     describe('Variable Timeout Scenarios', () => {
148 |       it('should handle random timeout durations', async () => {
149 |         // Test with random timeout values to ensure robustness
150 |         const randomTimeout = Math.floor(Math.random() * 10000) + 1000; // 1-11 seconds
151 |         mockTinkoffSDKControls.simulateVariableTimeout(randomTimeout);
                                     ^
TypeError: mockTinkoffSDKControls.simulateVariableTimeout is not a function. (In 'mockTinkoffSDKControls.simulateVariableTimeout(randomTimeout)', 'mockTinkoffSDKControls.simulateVariableTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:151:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:148:64)
(fail) Provider Module Network Resilience Tests > Network Timeout Scenarios > Variable Timeout Scenarios > should handle random timeout durations [2.00ms]
157 |   });
158 | 
159 |   describe('Network Latency Scenarios', () => {
160 |     describe('Low Latency', () => {
161 |       it('should handle normal network latency (10-50ms)', async () => {
162 |         mockTinkoffSDKControls.simulateLowLatency();
                                     ^
TypeError: mockTinkoffSDKControls.simulateLowLatency is not a function. (In 'mockTinkoffSDKControls.simulateLowLatency()', 'mockTinkoffSDKControls.simulateLowLatency' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:162:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:161:72)
(fail) Provider Module Network Resilience Tests > Network Latency Scenarios > Low Latency > should handle normal network latency (10-50ms)
167 |       });
168 |     });
169 | 
170 |     describe('High Latency', () => {
171 |       it('should handle high network latency (500-2000ms)', async () => {
172 |         mockTinkoffSDKControls.simulateHighLatency();
                                     ^
TypeError: mockTinkoffSDKControls.simulateHighLatency is not a function. (In 'mockTinkoffSDKControls.simulateHighLatency()', 'mockTinkoffSDKControls.simulateHighLatency' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:172:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:171:73)
(fail) Provider Module Network Resilience Tests > Network Latency Scenarios > High Latency > should handle high network latency (500-2000ms)
181 |       });
182 |     });
183 | 
184 |     describe('Variable Latency', () => {
185 |       it('should handle variable network latency patterns', async () => {
186 |         mockTinkoffSDKControls.simulateVariableLatency();
                                     ^
TypeError: mockTinkoffSDKControls.simulateVariableLatency is not a function. (In 'mockTinkoffSDKControls.simulateVariableLatency()', 'mockTinkoffSDKControls.simulateVariableLatency' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:186:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:185:73)
(fail) Provider Module Network Resilience Tests > Network Latency Scenarios > Variable Latency > should handle variable network latency patterns [3.00ms]
193 |   });
194 | 
195 |   describe('Connection Failure Scenarios', () => {
196 |     describe('Immediate Connection Failures', () => {
197 |       it('should handle immediate connection refused errors', async () => {
198 |         mockTinkoffSDKControls.simulateConnectionRefused();
                                     ^
TypeError: mockTinkoffSDKControls.simulateConnectionRefused is not a function. (In 'mockTinkoffSDKControls.simulateConnectionRefused()', 'mockTinkoffSDKControls.simulateConnectionRefused' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:198:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:197:75)
(fail) Provider Module Network Resilience Tests > Connection Failure Scenarios > Immediate Connection Failures > should handle immediate connection refused errors [1.00ms]
200 | 
201 |         await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
202 |       });
203 | 
204 |       it('should handle immediate connection reset errors', async () => {
205 |         mockTinkoffSDKControls.simulateConnectionReset();
                                     ^
TypeError: mockTinkoffSDKControls.simulateConnectionReset is not a function. (In 'mockTinkoffSDKControls.simulateConnectionReset()', 'mockTinkoffSDKControls.simulateConnectionReset' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:205:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:204:73)
(fail) Provider Module Network Resilience Tests > Connection Failure Scenarios > Immediate Connection Failures > should handle immediate connection reset errors [1.00ms]
209 |       });
210 |     });
211 | 
212 |     describe('Delayed Connection Failures', () => {
213 |       it('should handle connection failures after partial data transfer', async () => {
214 |         mockTinkoffSDKControls.simulatePartialTransferFailure();
                                     ^
TypeError: mockTinkoffSDKControls.simulatePartialTransferFailure is not a function. (In 'mockTinkoffSDKControls.simulatePartialTransferFailure()', 'mockTinkoffSDKControls.simulatePartialTransferFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:214:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:213:87)
(fail) Provider Module Network Resilience Tests > Connection Failure Scenarios > Delayed Connection Failures > should handle connection failures after partial data transfer
216 | 
217 |         await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
218 |       });
219 | 
220 |       it('should handle connection timeouts during handshake', async () => {
221 |         mockTinkoffSDKControls.simulateHandshakeTimeout();
                                     ^
TypeError: mockTinkoffSDKControls.simulateHandshakeTimeout is not a function. (In 'mockTinkoffSDKControls.simulateHandshakeTimeout()', 'mockTinkoffSDKControls.simulateHandshakeTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:221:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:220:76)
(fail) Provider Module Network Resilience Tests > Connection Failure Scenarios > Delayed Connection Failures > should handle connection timeouts during handshake [1.00ms]
226 |     });
227 |   });
228 | 
229 |   describe('DNS Resolution Scenarios', () => {
230 |     it('should handle DNS resolution timeouts', async () => {
231 |       mockTinkoffSDKControls.simulateDnsTimeout();
                                   ^
TypeError: mockTinkoffSDKControls.simulateDnsTimeout is not a function. (In 'mockTinkoffSDKControls.simulateDnsTimeout()', 'mockTinkoffSDKControls.simulateDnsTimeout' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:231:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:230:49)
(fail) Provider Module Network Resilience Tests > DNS Resolution Scenarios > should handle DNS resolution timeouts [1.00ms]
233 | 
234 |       await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
235 |     });
236 | 
237 |     it('should handle DNS resolution failures', async () => {
238 |       mockTinkoffSDKControls.simulateDnsFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulateDnsFailure is not a function. (In 'mockTinkoffSDKControls.simulateDnsFailure()', 'mockTinkoffSDKControls.simulateDnsFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:238:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:237:49)
(fail) Provider Module Network Resilience Tests > DNS Resolution Scenarios > should handle DNS resolution failures
240 | 
241 |       await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
242 |     });
243 | 
244 |     it('should handle temporary DNS issues', async () => {
245 |       mockTinkoffSDKControls.simulateTemporaryDnsIssue();
                                   ^
TypeError: mockTinkoffSDKControls.simulateTemporaryDnsIssue is not a function. (In 'mockTinkoffSDKControls.simulateTemporaryDnsIssue()', 'mockTinkoffSDKControls.simulateTemporaryDnsIssue' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:245:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:244:46)
(fail) Provider Module Network Resilience Tests > DNS Resolution Scenarios > should handle temporary DNS issues [1.00ms]
249 |     });
250 |   });
251 | 
252 |   describe('Network Partition Scenarios', () => {
253 |     it('should handle partial network partitions', async () => {
254 |       mockTinkoffSDKControls.simulatePartialNetworkPartition();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePartialNetworkPartition is not a function. (In 'mockTinkoffSDKControls.simulatePartialNetworkPartition()', 'mockTinkoffSDKControls.simulatePartialNetworkPartition' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:254:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:253:52)
(fail) Provider Module Network Resilience Tests > Network Partition Scenarios > should handle partial network partitions [1.00ms]
256 | 
257 |       await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
258 |     });
259 | 
260 |     it('should handle complete network partitions', async () => {
261 |       mockTinkoffSDKControls.simulateCompleteNetworkPartition();
                                   ^
TypeError: mockTinkoffSDKControls.simulateCompleteNetworkPartition is not a function. (In 'mockTinkoffSDKControls.simulateCompleteNetworkPartition()', 'mockTinkoffSDKControls.simulateCompleteNetworkPartition' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:261:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:260:53)
(fail) Provider Module Network Resilience Tests > Network Partition Scenarios > should handle complete network partitions [1.00ms]
265 |     });
266 |   });
267 | 
268 |   describe('Bandwidth Limitation Scenarios', () => {
269 |     it('should handle low bandwidth connections', async () => {
270 |       mockTinkoffSDKControls.simulateLowBandwidth();
                                   ^
TypeError: mockTinkoffSDKControls.simulateLowBandwidth is not a function. (In 'mockTinkoffSDKControls.simulateLowBandwidth()', 'mockTinkoffSDKControls.simulateLowBandwidth' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:270:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:269:51)
(fail) Provider Module Network Resilience Tests > Bandwidth Limitation Scenarios > should handle low bandwidth connections
273 |       const accountId = await getAccountId('0');
274 |       expect(accountId).toBe('account-1');
275 |     });
276 | 
277 |     it('should handle bandwidth throttling', async () => {
278 |       mockTinkoffSDKControls.simulateBandwidthThrottling();
                                   ^
TypeError: mockTinkoffSDKControls.simulateBandwidthThrottling is not a function. (In 'mockTinkoffSDKControls.simulateBandwidthThrottling()', 'mockTinkoffSDKControls.simulateBandwidthThrottling' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:278:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:277:46)
(fail) Provider Module Network Resilience Tests > Bandwidth Limitation Scenarios > should handle bandwidth throttling [1.00ms]
285 | 
286 |   describe('Retry Mechanism Tests', () => {
287 |     describe('Exponential Backoff', () => {
288 |       it('should implement exponential backoff for retries', async () => {
289 |         // Test that retries use exponential backoff (1s, 2s, 4s, 8s, etc.)
290 |         mockTinkoffSDKControls.simulateTransientError();
                                     ^
TypeError: mockTinkoffSDKControls.simulateTransientError is not a function. (In 'mockTinkoffSDKControls.simulateTransientError()', 'mockTinkoffSDKControls.simulateTransientError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:290:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:288:74)
(fail) Provider Module Network Resilience Tests > Retry Mechanism Tests > Exponential Backoff > should implement exponential backoff for retries [1.00ms]
294 |         // In a real test, we would verify the retry timing
295 |       });
296 | 
297 |       it('should limit retry attempts to prevent infinite loops', async () => {
298 |         // Test that there's a maximum number of retry attempts
299 |         mockTinkoffSDKControls.simulatePersistentError();
                                     ^
TypeError: mockTinkoffSDKControls.simulatePersistentError is not a function. (In 'mockTinkoffSDKControls.simulatePersistentError()', 'mockTinkoffSDKControls.simulatePersistentError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:299:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:297:79)
(fail) Provider Module Network Resilience Tests > Retry Mechanism Tests > Exponential Backoff > should limit retry attempts to prevent infinite loops
304 |     });
305 | 
306 |     describe('Retry with Jitter', () => {
307 |       it('should add jitter to retry intervals', async () => {
308 |         // Test that retry intervals include randomization to prevent thundering herd
309 |         mockTinkoffSDKControls.simulateRetryWithJitter();
                                     ^
TypeError: mockTinkoffSDKControls.simulateRetryWithJitter is not a function. (In 'mockTinkoffSDKControls.simulateRetryWithJitter()', 'mockTinkoffSDKControls.simulateRetryWithJitter' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:309:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:307:62)
(fail) Provider Module Network Resilience Tests > Retry Mechanism Tests > Retry with Jitter > should add jitter to retry intervals
316 |   });
317 | 
318 |   describe('Circuit Breaker Pattern', () => {
319 |     it('should implement circuit breaker for repeated failures', async () => {
320 |       // Test that the system opens a circuit breaker after repeated failures
321 |       mockTinkoffSDKControls.simulateRepeatedFailures();
                                   ^
TypeError: mockTinkoffSDKControls.simulateRepeatedFailures is not a function. (In 'mockTinkoffSDKControls.simulateRepeatedFailures()', 'mockTinkoffSDKControls.simulateRepeatedFailures' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:321:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:319:66)
(fail) Provider Module Network Resilience Tests > Circuit Breaker Pattern > should implement circuit breaker for repeated failures [1.00ms]
324 |       await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
325 |     });
326 | 
327 |     it('should allow periodic probe requests when circuit is open', async () => {
328 |       // Test that the system periodically attempts to close the circuit
329 |       mockTinkoffSDKControls.simulateCircuitBreakerProbe();
                                   ^
TypeError: mockTinkoffSDKControls.simulateCircuitBreakerProbe is not a function. (In 'mockTinkoffSDKControls.simulateCircuitBreakerProbe()', 'mockTinkoffSDKControls.simulateCircuitBreakerProbe' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:329:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:327:69)
(fail) Provider Module Network Resilience Tests > Circuit Breaker Pattern > should allow periodic probe requests when circuit is open [1.00ms]
335 |   });
336 | 
337 |   describe('Graceful Degradation', () => {
338 |     it('should continue operating with cached data during network issues', async () => {
339 |       // Test that the system can use cached data when network is unavailable
340 |       mockTinkoffSDKControls.simulateNetworkUnavailable();
                                   ^
TypeError: mockTinkoffSDKControls.simulateNetworkUnavailable is not a function. (In 'mockTinkoffSDKControls.simulateNetworkUnavailable()', 'mockTinkoffSDKControls.simulateNetworkUnavailable' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:340:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:338:76)
(fail) Provider Module Network Resilience Tests > Graceful Degradation > should continue operating with cached data during network issues
344 |       expect(accountId).toBe('account-1');
345 |     });
346 | 
347 |     it('should provide fallback mechanisms for critical operations', async () => {
348 |       // Test that critical operations have fallback mechanisms
349 |       mockTinkoffSDKControls.simulateCriticalOperationFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulateCriticalOperationFailure is not a function. (In 'mockTinkoffSDKControls.simulateCriticalOperationFailure()', 'mockTinkoffSDKControls.simulateCriticalOperationFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:349:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:347:70)
(fail) Provider Module Network Resilience Tests > Graceful Degradation > should provide fallback mechanisms for critical operations [1.00ms]
355 |   });
356 | 
357 |   describe('Network Resilience for Batch Operations', () => {
358 |     it('should handle network issues during batch account retrieval', async () => {
359 |       // Test batch operations with network resilience
360 |       mockTinkoffSDKControls.simulateBatchOperationFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulateBatchOperationFailure is not a function. (In 'mockTinkoffSDKControls.simulateBatchOperationFailure()', 'mockTinkoffSDKControls.simulateBatchOperationFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:360:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:358:71)
(fail) Provider Module Network Resilience Tests > Network Resilience for Batch Operations > should handle network issues during batch account retrieval
363 |       await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
364 |     });
365 | 
366 |     it('should implement partial success handling for batch operations', async () => {
367 |       // Test that batch operations can partially succeed
368 |       mockTinkoffSDKControls.simulatePartialBatchSuccess();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePartialBatchSuccess is not a function. (In 'mockTinkoffSDKControls.simulatePartialBatchSuccess()', 'mockTinkoffSDKControls.simulatePartialBatchSuccess' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:368:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:366:74)
(fail) Provider Module Network Resilience Tests > Network Resilience for Batch Operations > should implement partial success handling for batch operations
374 |   });
375 | 
376 |   describe('Network Resilience for Streaming Operations', () => {
377 |     it('should handle stream interruptions gracefully', async () => {
378 |       // Test streaming operations with network resilience
379 |       mockTinkoffSDKControls.simulateStreamInterruption();
                                   ^
TypeError: mockTinkoffSDKControls.simulateStreamInterruption is not a function. (In 'mockTinkoffSDKControls.simulateStreamInterruption()', 'mockTinkoffSDKControls.simulateStreamInterruption' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:379:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:377:57)
(fail) Provider Module Network Resilience Tests > Network Resilience for Streaming Operations > should handle stream interruptions gracefully [1.00ms]
382 |       await expect(getPositionsCycle({ runOnce: true })).rejects.toThrow('UNAVAILABLE');
383 |     });
384 | 
385 |     it('should implement stream reconnection logic', async () => {
386 |       // Test that streams can reconnect after interruption
387 |       mockTinkoffSDKControls.simulateStreamReconnection();
                                   ^
TypeError: mockTinkoffSDKControls.simulateStreamReconnection is not a function. (In 'mockTinkoffSDKControls.simulateStreamReconnection()', 'mockTinkoffSDKControls.simulateStreamReconnection' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:387:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:385:54)
(fail) Provider Module Network Resilience Tests > Network Resilience for Streaming Operations > should implement stream reconnection logic
392 |   });
393 | 
394 |   describe('Performance Under Network Stress', () => {
395 |     it('should maintain acceptable performance under moderate network stress', async () => {
396 |       // Test performance under moderate network conditions
397 |       mockTinkoffSDKControls.simulateModerateNetworkStress();
                                   ^
TypeError: mockTinkoffSDKControls.simulateModerateNetworkStress is not a function. (In 'mockTinkoffSDKControls.simulateModerateNetworkStress()', 'mockTinkoffSDKControls.simulateModerateNetworkStress' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:397:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:395:80)
(fail) Provider Module Network Resilience Tests > Performance Under Network Stress > should maintain acceptable performance under moderate network stress [1.00ms]
406 |       expect(endTime - startTime).toBeLessThan(10000); // 10 seconds
407 |     });
408 | 
409 |     it('should handle high concurrent network requests', async () => {
410 |       // Test handling of multiple concurrent network requests
411 |       mockTinkoffSDKControls.simulateHighConcurrency();
                                   ^
TypeError: mockTinkoffSDKControls.simulateHighConcurrency is not a function. (In 'mockTinkoffSDKControls.simulateHighConcurrency()', 'mockTinkoffSDKControls.simulateHighConcurrency' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:411:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-network-resilience.test.ts:409:58)
(fail) Provider Module Network Resilience Tests > Performance Under Network Stress > should handle high concurrent network requests [1.00ms]

src/__tests__/provider/provider-api-error-handling.test.ts:
137 | 
138 |         await expect(getAccountId('0')).rejects.toThrow('UNAUTHENTICATED');
139 |       });
140 | 
141 |       it('should handle permission denied errors', async () => {
142 |         mockTinkoffSDKControls.simulatePermissionDenied();
                                     ^
TypeError: mockTinkoffSDKControls.simulatePermissionDenied is not a function. (In 'mockTinkoffSDKControls.simulatePermissionDenied()', 'mockTinkoffSDKControls.simulatePermissionDenied' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:142:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:141:64)
(fail) Provider Module API Error Handling Tests > Account Management API Error Handling > getAccountId - Authentication Errors > should handle permission denied errors [1.00ms]
153 | 
154 |         await expect(getAccountId('0')).rejects.toThrow('DEADLINE_EXCEEDED');
155 |       });
156 | 
157 |       it('should handle connection failures', async () => {
158 |         mockTinkoffSDKControls.simulateConnectionFailure();
                                     ^
TypeError: mockTinkoffSDKControls.simulateConnectionFailure is not a function. (In 'mockTinkoffSDKControls.simulateConnectionFailure()', 'mockTinkoffSDKControls.simulateConnectionFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:158:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:157:59)
(fail) Provider Module API Error Handling Tests > Account Management API Error Handling > getAccountId - Network Errors > should handle connection failures
160 | 
161 |         await expect(getAccountId('0')).rejects.toThrow('UNAVAILABLE');
162 |       });
163 | 
164 |       it('should handle DNS resolution errors', async () => {
165 |         mockTinkoffSDKControls.simulateDnsError();
                                     ^
TypeError: mockTinkoffSDKControls.simulateDnsError is not a function. (In 'mockTinkoffSDKControls.simulateDnsError()', 'mockTinkoffSDKControls.simulateDnsError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:165:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:164:61)
(fail) Provider Module API Error Handling Tests > Account Management API Error Handling > getAccountId - Network Errors > should handle DNS resolution errors [1.00ms]
169 |       });
170 |     });
171 | 
172 |     describe('getAccountId - Server Errors', () => {
173 |       it('should handle internal server errors', async () => {
174 |         mockTinkoffSDKControls.simulateInternalServerError();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInternalServerError is not a function. (In 'mockTinkoffSDKControls.simulateInternalServerError()', 'mockTinkoffSDKControls.simulateInternalServerError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:174:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:173:62)
(fail) Provider Module API Error Handling Tests > Account Management API Error Handling > getAccountId - Server Errors > should handle internal server errors [1.00ms]
176 | 
177 |         await expect(getAccountId('0')).rejects.toThrow('INTERNAL');
178 |       });
179 | 
180 |       it('should handle service unavailable errors', async () => {
181 |         mockTinkoffSDKControls.simulateServiceUnavailable();
                                     ^
TypeError: mockTinkoffSDKControls.simulateServiceUnavailable is not a function. (In 'mockTinkoffSDKControls.simulateServiceUnavailable()', 'mockTinkoffSDKControls.simulateServiceUnavailable' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:181:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:180:66)
(fail) Provider Module API Error Handling Tests > Account Management API Error Handling > getAccountId - Server Errors > should handle service unavailable errors [1.00ms]
208 | 
209 |         await expect(getLastPrice('BBG004S68614')).rejects.toThrow('DEADLINE_EXCEEDED');
210 |       });
211 | 
212 |       it('should handle invalid FIGI errors gracefully', async () => {
213 |         mockTinkoffSDKControls.simulateInvalidArgument();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInvalidArgument is not a function. (In 'mockTinkoffSDKControls.simulateInvalidArgument()', 'mockTinkoffSDKControls.simulateInvalidArgument' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:213:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:212:70)
(fail) Provider Module API Error Handling Tests > Market Data API Error Handling > getLastPrice - Error Scenarios > should handle invalid FIGI errors gracefully
238 | 
239 |         await expect(getInstruments()).rejects.toThrow('DEADLINE_EXCEEDED');
240 |       });
241 | 
242 |       it('should handle partial failures during instrument loading', async () => {
243 |         mockTinkoffSDKControls.simulatePartialFailure();
                                     ^
TypeError: mockTinkoffSDKControls.simulatePartialFailure is not a function. (In 'mockTinkoffSDKControls.simulatePartialFailure()', 'mockTinkoffSDKControls.simulatePartialFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:243:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:242:82)
(fail) Provider Module API Error Handling Tests > Market Data API Error Handling > getInstruments - Error Scenarios > should handle partial failures during instrument loading
270 | 
271 |         await expect(isExchangeOpenNow('MOEX')).rejects.toThrow('DEADLINE_EXCEEDED');
272 |       });
273 | 
274 |       it('should handle invalid exchange identifiers', async () => {
275 |         mockTinkoffSDKControls.simulateInvalidArgument();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInvalidArgument is not a function. (In 'mockTinkoffSDKControls.simulateInvalidArgument()', 'mockTinkoffSDKControls.simulateInvalidArgument' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:275:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:274:68)
(fail) Provider Module API Error Handling Tests > Exchange Status API Error Handling > isExchangeOpenNow - Error Scenarios > should handle invalid exchange identifiers [1.00ms]
315 | 
316 |         await expect(mockGenerateOrder()).rejects.toThrow('UNAUTHENTICATED');
317 |       });
318 | 
319 |       it('should handle insufficient funds errors', async () => {
320 |         mockTinkoffSDKControls.simulateInsufficientFunds();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInsufficientFunds is not a function. (In 'mockTinkoffSDKControls.simulateInsufficientFunds()', 'mockTinkoffSDKControls.simulateInsufficientFunds' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:320:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:319:65)
(fail) Provider Module API Error Handling Tests > Order Management API Error Handling > generateOrder - Error Scenarios > should handle insufficient funds errors [1.00ms]
332 | 
333 |         await expect(mockGenerateOrder()).rejects.toThrow('FAILED_PRECONDITION');
334 |       });
335 | 
336 |       it('should handle invalid order parameters', async () => {
337 |         mockTinkoffSDKControls.simulateInvalidArgument();
                                     ^
TypeError: mockTinkoffSDKControls.simulateInvalidArgument is not a function. (In 'mockTinkoffSDKControls.simulateInvalidArgument()', 'mockTinkoffSDKControls.simulateInvalidArgument' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:337:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:336:64)
(fail) Provider Module API Error Handling Tests > Order Management API Error Handling > generateOrder - Error Scenarios > should handle invalid order parameters
349 | 
350 |         await expect(mockGenerateOrder()).rejects.toThrow('INVALID_ARGUMENT');
351 |       });
352 | 
353 |       it('should handle order rejection errors', async () => {
354 |         mockTinkoffSDKControls.simulateOrderRejection();
                                     ^
TypeError: mockTinkoffSDKControls.simulateOrderRejection is not a function. (In 'mockTinkoffSDKControls.simulateOrderRejection()', 'mockTinkoffSDKControls.simulateOrderRejection' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:354:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:353:62)
(fail) Provider Module API Error Handling Tests > Order Management API Error Handling > generateOrder - Error Scenarios > should handle order rejection errors
419 |   describe('Provider Main Function API Error Handling', () => {
420 |     it('should handle initialization errors gracefully', async () => {
421 |       mockTinkoffSDKControls.simulateUnauthorized();
422 |       mockGetAccountId.mockRejectedValue(new Error('UNAUTHENTICATED: Token is invalid'));
423 | 
424 |       await expect(provider({ runOnce: true })).rejects.toThrow('UNAUTHENTICATED');
                         ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:424:20)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:420:58)
(fail) Provider Module API Error Handling Tests > Provider Main Function API Error Handling > should handle initialization errors gracefully
426 | 
427 |     it('should handle instrument loading errors during initialization', async () => {
428 |       mockTinkoffSDKControls.simulateTimeout();
429 |       mockGetInstruments.mockRejectedValue(new Error('DEADLINE_EXCEEDED: Request timed out'));
430 | 
431 |       await expect(provider({ runOnce: true })).rejects.toThrow('DEADLINE_EXCEEDED');
                         ^
ReferenceError: Cannot access 'provider' before initialization.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:431:20)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:427:73)
(fail) Provider Module API Error Handling Tests > Provider Main Function API Error Handling > should handle instrument loading errors during initialization [1.00ms]
430 | 
431 |       await expect(provider({ runOnce: true })).rejects.toThrow('DEADLINE_EXCEEDED');
432 |     });
433 | 
434 |     it('should handle position cycle errors during initialization', async () => {
435 |       mockTinkoffSDKControls.simulateInternalServerError();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInternalServerError is not a function. (In 'mockTinkoffSDKControls.simulateInternalServerError()', 'mockTinkoffSDKControls.simulateInternalServerError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:435:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:434:69)
(fail) Provider Module API Error Handling Tests > Provider Main Function API Error Handling > should handle position cycle errors during initialization [1.00ms]
451 |     });
452 | 
453 |     it('should implement circuit breaker pattern for repeated failures', async () => {
454 |       // Test that the system implements circuit breaker pattern to prevent
455 |       // overwhelming the API with repeated failed requests
456 |       mockTinkoffSDKControls.simulateConnectionFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulateConnectionFailure is not a function. (In 'mockTinkoffSDKControls.simulateConnectionFailure()', 'mockTinkoffSDKControls.simulateConnectionFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:456:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:453:74)
(fail) Provider Module API Error Handling Tests > Error Recovery and Retry Logic > should implement circuit breaker pattern for repeated failures
460 |     });
461 | 
462 |     it('should implement graceful degradation for non-critical API failures', async () => {
463 |       // Test that the system can continue operating with reduced functionality
464 |       // when non-critical APIs fail
465 |       mockTinkoffSDKControls.simulatePartialFailure();
                                   ^
TypeError: mockTinkoffSDKControls.simulatePartialFailure is not a function. (In 'mockTinkoffSDKControls.simulatePartialFailure()', 'mockTinkoffSDKControls.simulatePartialFailure' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:465:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:462:79)
(fail) Provider Module API Error Handling Tests > Error Recovery and Retry Logic > should implement graceful degradation for non-critical API failures [1.00ms]
478 |       expect(true).toBe(true); // Placeholder
479 |     });
480 | 
481 |     it('should include error correlation IDs in logs', async () => {
482 |       // Test that errors include correlation IDs for tracking
483 |       mockTinkoffSDKControls.simulateInternalServerError();
                                   ^
TypeError: mockTinkoffSDKControls.simulateInternalServerError is not a function. (In 'mockTinkoffSDKControls.simulateInternalServerError()', 'mockTinkoffSDKControls.simulateInternalServerError' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:483:30)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/provider/provider-api-error-handling.test.ts:481:56)
(fail) Provider Module API Error Handling Tests > Error Logging and Monitoring > should include error correlation IDs in logs

src/__tests__/utils/data-validation-errors.test.ts:
466 |         }
467 |       ];
468 | 
469 |       testCases.forEach(({ account, expectedError }) => {
470 |         const errors = validateAccount(account);
471 |         expect(errors).toContain(expectedError);
                             ^
error: expect(received).toContain(expected)

Expected to contain: "Account validation failed: \"name\" cannot be empty"
Received: [ "Account validation failed: missing required field \"name\"",
  "Account validation failed: missing required field \"t_invest_token\"", "Account validation failed: missing required field \"account_id\"",
  "Account validation failed: missing required field \"desired_wallet\"", "Account validation failed: missing required field \"balance_interval\"",
  "Account validation failed: missing required field \"sleep_between_orders\""
]

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/utils/data-validation-errors.test.ts:471:24)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/utils/data-validation-errors.test.ts:469:17)
(fail) Data Validation Error Handling with Proper Error Messages Tests > Configuration Data Validation > should validate account configuration with proper error messages [2.00ms]
619 |         '"desired_wallet" must be an object',
620 |         'weight for TRUR cannot be negative'
621 |       ];
622 | 
623 |       fieldSpecificErrors.forEach(errorMsg => {
624 |         expect(errorMsg).toMatch(/".*"/); // Contains quoted field names
                               ^
error: expect(received).toMatch(expected)

Expected substring or pattern: /".*"/
Received: "weight for TRUR cannot be negative"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/utils/data-validation-errors.test.ts:624:26)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/utils/data-validation-errors.test.ts:623:27)
(fail) Data Validation Error Handling with Proper Error Messages Tests > Error Message Consistency > should include specific field information in error messages [1.00ms]

src/__tests__/integration/buy-requires-margin-trading-integration.test.ts:
424 |           'REMAINING:TMOS'
425 |         ]);
426 |       } finally {
427 |         // Restore original functions
428 |         (global as any).generateOrdersSequential = originalGenerateOrdersSequential;
429 |         (global as any).generateOrders = originalGenerateOrders;
                                               ^
ReferenceError: originalGenerateOrders is not defined
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/buy-requires-margin-trading-integration.test.ts:429:42)
(fail) Buy Requires Total Marginal Sell with Margin Trading Integration Tests > Order Execution Integration > should execute orders in the correct sequence when both features are active [3.00ms]
459 |           return Promise.resolve();
460 |         }
461 |       });
462 | 
463 |       try {
464 |         await expect((global as any).generateOrders(wallet)).resolves.not.toThrow();
                                                                                ^
error: expect(received).not.toThrow()

Thrown value: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/buy-requires-margin-trading-integration.test.ts:464:75)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/buy-requires-margin-trading-integration.test.ts:433:77)
(fail) Buy Requires Total Marginal Sell with Margin Trading Integration Tests > Order Execution Integration > should handle API errors gracefully when both features are active [2.00ms]

src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:
275 |       const balancerModule = await import('../../balancer');
276 |       const pollEtfMetricsModule = await import('../../tools/pollEtfMetrics');
277 | 
278 |       // Mock pollEtfMetrics to avoid external API calls
279 |       const originalCollectOnceForSymbols = pollEtfMetricsModule.collectOnceForSymbols;
280 |       pollEtfMetricsModule.collectOnceForSymbols = mock(async () => {
            ^
TypeError: Attempted to assign to readonly property.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:280:7)
(fail) Full Portfolio Rebalancing Workflow Integration Tests > Complete End-to-End Rebalancing Workflow > should execute full portfolio rebalancing workflow from start to finish [18.00ms]
508 |           totalPriceNumber: 50000
509 |         }
510 |       ];
511 | 
512 |       // Calculate portfolio shares
513 |       const shares = providerModule.calculatePortfolioShares(mockWallet);
                                          ^
TypeError: providerModule.calculatePortfolioShares is not a function. (In 'providerModule.calculatePortfolioShares(mockWallet)', 'providerModule.calculatePortfolioShares' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:513:37)
(fail) Full Portfolio Rebalancing Workflow Integration Tests > Portfolio State Management > should correctly calculate portfolio shares before and after rebalancing [1.00ms]
530 | 
531 |       // Create an empty wallet
532 |       const emptyWallet: any[] = [];
533 | 
534 |       // Calculate portfolio shares for empty wallet
535 |       const shares = providerModule.calculatePortfolioShares(emptyWallet);
                                          ^
TypeError: providerModule.calculatePortfolioShares is not a function. (In 'providerModule.calculatePortfolioShares(emptyWallet)', 'providerModule.calculatePortfolioShares' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:535:37)
(fail) Full Portfolio Rebalancing Workflow Integration Tests > Portfolio State Management > should handle empty portfolio gracefully [1.00ms]
710 | 
711 |       // Measure performance
712 |       const startTime = performance.now();
713 | 
714 |       // Calculate portfolio shares
715 |       const shares = providerModule.calculatePortfolioShares(largePortfolio);
                                          ^
TypeError: providerModule.calculatePortfolioShares is not a function. (In 'providerModule.calculatePortfolioShares(largePortfolio)', 'providerModule.calculatePortfolioShares' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:715:37)
(fail) Full Portfolio Rebalancing Workflow Integration Tests > Performance and Scalability > should handle large portfolios efficiently [1.00ms]
628 |     });
629 | 
630 |     it('should handle configuration errors gracefully', async () => {
631 |       // Set up failing config loader
632 |       mockConfigLoader.getAccountById.mockImplementation(() => {
633 |         throw new Error('Configuration Error');
                        ^
error: Configuration Error
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:633:19)
      at getAccountConfig (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:29:32)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:278:25)
      at balancer (/tmp/gh-issue-solver-1758074196784/src/balancer/index.ts:264:3)
      at map (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:784:20)
(fail) Full Portfolio Rebalancing Workflow Integration Tests > Performance and Scalability > should handle concurrent rebalancing operations [1.00ms]

src/__tests__/configManager/configManagerSimple.test.ts:
66 |         }
67 |       };
68 | 
69 |       expect(() => {
70 |         (configLoader as any).validateAccount(account);
71 |       }).toThrow("Wallet validation failed: sum of weights for account test_account equals 105%, expected 100%");
              ^
error: expect(received).toThrow(expected)

Expected substring: "Wallet validation failed: sum of weights for account test_account equals 105%, expected 100%"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:71:10)
(fail) ConfigManager Update Tests - Real File Operations > Wallet validation tests > should validate that wallet percentages sum to 100% [1.00ms]
81 |         }
82 |       };
83 | 
84 |       expect(() => {
85 |         (configLoader as any).validateAccount(account);
86 |       }).not.toThrow();
                  ^
error: expect(received).not.toThrow()

Error name: "TypeError"
Error message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:86:14)
(fail) ConfigManager Update Tests - Real File Operations > Wallet validation tests > should pass validation when wallet percentages sum to 100% [1.00ms]
 96 |         }
 97 |       };
 98 | 
 99 |       expect(() => {
100 |         (configLoader as any).validateAccount(account);
101 |       }).toThrow("Invalid percentage for ticker TGLD: must be between 0 and 100");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Invalid percentage for ticker TGLD: must be between 0 and 100"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:101:10)
(fail) ConfigManager Update Tests - Real File Operations > Wallet validation tests > should fail validation when wallet has negative percentages [1.00ms]
111 |         }
112 |       };
113 | 
114 |       expect(() => {
115 |         (configLoader as any).validateAccount(account);
116 |       }).toThrow("Invalid percentage for ticker TGLD: must be a number");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Invalid percentage for ticker TGLD: must be a number"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:116:10)
(fail) ConfigManager Update Tests - Real File Operations > Wallet validation tests > should fail validation when wallet has non-numeric values [1.00ms]
126 |         }
127 |       };
128 | 
129 |       expect(() => {
130 |         (configLoader as any).validateAccount(account);
131 |       }).not.toThrow();
                   ^
error: expect(received).not.toThrow()

Error name: "TypeError"
Error message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:131:14)
(fail) ConfigManager Update Tests - Real File Operations > Wallet validation tests > should accept wallet percentages with small tolerance (within 1%)
143 |         }
144 |       };
145 | 
146 |       expect(() => {
147 |         (configLoader as any).validateAccount(account);
148 |       }).toThrow("Invalid percentage for ticker TRUR: value too large");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Invalid percentage for ticker TRUR: value too large"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:148:10)
(fail) ConfigManager Update Tests - Real File Operations > Large number validation tests > should reject extremely large percentage values [1.00ms]
158 |         }
159 |       };
160 | 
161 |       expect(() => {
162 |         (configLoader as any).validateAccount(account);
163 |       }).toThrow("Invalid percentage for ticker TRUR: value too large");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Invalid percentage for ticker TRUR: value too large"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:163:10)
(fail) ConfigManager Update Tests - Real File Operations > Large number validation tests > should reject infinite values
173 |         }
174 |       };
175 | 
176 |       expect(() => {
177 |         (configLoader as any).validateAccount(account);
178 |       }).toThrow("Invalid percentage for ticker TRUR: must be a number");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Invalid percentage for ticker TRUR: must be a number"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:178:10)
(fail) ConfigManager Update Tests - Real File Operations > Large number validation tests > should reject NaN values
188 |         }
189 |       };
190 | 
191 |       expect(() => {
192 |         (configLoader as any).validateAccount(account);
193 |       }).not.toThrow();
                   ^
error: expect(received).not.toThrow()

Error name: "TypeError"
Error message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:193:14)
(fail) ConfigManager Update Tests - Real File Operations > Large number validation tests > should handle very small decimal values
202 |         // Missing required fields
203 |       } as any;
204 | 
205 |       expect(() => {
206 |         (configLoader as any).validateAccount(incompleteAccount);
207 |       }).toThrow("Account test_account must contain field t_invest_token");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Account test_account must contain field t_invest_token"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(incompleteAccount)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:207:10)
(fail) ConfigManager Update Tests - Real File Operations > Required field validation > should fail validation when required fields are missing [1.00ms]
213 |         desired_wallet: {}
214 |       };
215 | 
216 |       expect(() => {
217 |         (configLoader as any).validateAccount(account);
218 |       }).toThrow("Account test_account must contain non-empty desired_wallet");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Account test_account must contain non-empty desired_wallet"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:218:10)
(fail) ConfigManager Update Tests - Real File Operations > Required field validation > should fail validation when desired_wallet is empty
224 |         desired_wallet: null as any
225 |       };
226 | 
227 |       expect(() => {
228 |         (configLoader as any).validateAccount(account);
229 |       }).toThrow("Account test_account must contain non-empty desired_wallet");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Account test_account must contain non-empty desired_wallet"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:229:10)
(fail) ConfigManager Update Tests - Real File Operations > Required field validation > should fail validation when desired_wallet is null [1.00ms]
241 |         }
242 |       };
243 | 
244 |       expect(() => {
245 |         (configLoader as any).validateAccount(account);
246 |       }).toThrow("Invalid percentage for ticker TRUR: must be between 0 and 100");
               ^
error: expect(received).toThrow(expected)

Expected substring: "Invalid percentage for ticker TRUR: must be between 0 and 100"
Received message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:246:10)
(fail) ConfigManager Update Tests - Real File Operations > Edge cases > should handle percentages over 100 for individual tickers
256 |         }
257 |       };
258 | 
259 |       expect(() => {
260 |         (configLoader as any).validateAccount(account);
261 |       }).not.toThrow();
                   ^
error: expect(received).not.toThrow()

Error name: "TypeError"
Error message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:261:14)
(fail) ConfigManager Update Tests - Real File Operations > Edge cases > should handle zero percentages
269 |         }
270 |       };
271 | 
272 |       expect(() => {
273 |         (configLoader as any).validateAccount(account);
274 |       }).not.toThrow();
                   ^
error: expect(received).not.toThrow()

Error name: "TypeError"
Error message: "configLoader.validateAccount is not a function. (In 'configLoader.validateAccount(account)', 'configLoader.validateAccount' is undefined)"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerSimple.test.ts:274:14)
(fail) ConfigManager Update Tests - Real File Operations > Edge cases > should handle exactly 100% for single asset [1.00ms]

src/__tests__/configManager/configManagerAsync.test.ts:
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should pass validation when wallet percentages sum to 100% [2.00ms]

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should pass validation when wallet percentages sum to 100%
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should fail validation when wallet percentages don't sum to 100%

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should fail validation when wallet percentages don't sum to 100%
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should fail validation when wallet has negative percentages

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should fail validation when wallet has negative percentages
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should fail validation when wallet has non-numeric values [1.00ms]

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should fail validation when wallet has non-numeric values
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async wallet validation during updates > should accept wallet percentages with small tolerance (within 1%)

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > should accept wallet percentages with small tolerance (within 1%)
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async large number validation > should reject extremely large percentage values

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async large number validation > should reject extremely large percentage values
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async large number validation > should handle maximum safe integer values for other fields

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async large number validation > should handle maximum safe integer values for other fields
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async large number validation > should reject infinite values

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async large number validation > should reject infinite values
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async large number validation > should reject NaN values [1.00ms]

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Async large number validation > should reject NaN values
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Async large number validation > should handle very small decimal values

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > should handle very small decimal values
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Additional async edge cases > should handle updates to non-existent account

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Additional async edge cases > should handle updates to non-existent account
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Additional async edge cases > should preserve other account configs during updates

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Additional async edge cases > should preserve other account configs during updates
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Additional async edge cases > should handle empty desired_wallet updates [1.00ms]

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Additional async edge cases > should handle empty desired_wallet updates
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Additional async edge cases > should properly handle updateConfig with entire config

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > Additional async edge cases > should properly handle updateConfig with entire config
38 |     // Reset the config instance
39 |     (configLoader as any).config = null;
40 | 
41 |     // Backup original config if it exists
42 |     if (existsSync(testConfigPath)) {
43 |       writeFileSync(backupConfigPath, require('fs').readFileSync(testConfigPath, 'utf8'));
                                                         ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:43:53)
(fail) ConfigManager Async Update Tests > Additional async edge cases > should handle config validation failure in updateConfig

# Unhandled error between tests
-------------------------------
48 |   });
49 | 
50 |   afterEach(() => {
51 |     // Restore original config if backup exists
52 |     if (existsSync(backupConfigPath)) {
53 |       writeFileSync(testConfigPath, require('fs').readFileSync(backupConfigPath, 'utf8'));
                                                       ^
error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG_BACKUP.json'
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configManager/configManagerAsync.test.ts:53:51)
-------------------------------

(fail) ConfigManager Async Update Tests > should handle config validation failure in updateConfig

src/__tests__/configLoader/enhanced-configLoader.test.ts:
72 |     it('should load actual test configuration successfully', () => {
73 |       const config = configLoader.loadConfig();
74 | 
75 |       expect(config).toBeDefined();
76 |       expect(config.accounts).toBeDefined();
77 |       expect(config.accounts).toHaveLength(1);
                                   ^
error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 3

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:77:31)
(fail) ConfigLoader Enhanced Coverage > Configuration loading with actual test config > should load actual test configuration successfully [2.00ms]
87 |     });
88 | 
89 |     it('should resolve environment variable tokens', () => {
90 |       const token = configLoader.getAccountToken('0');
91 | 
92 |       expect(token).toBe('test-token-from-env');
                         ^
error: expect(received).toBe(expected)

Expected: "test-token-from-env"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:92:21)
(fail) ConfigLoader Enhanced Coverage > Configuration loading with actual test config > should resolve environment variable tokens [1.00ms]
93 |     });
94 | 
95 |     it('should identify environment variable tokens correctly', () => {
96 |       const isFromEnv = configLoader.isTokenFromEnv('0');
97 | 
98 |       expect(isFromEnv).toBe(true);
                             ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:98:25)
(fail) ConfigLoader Enhanced Coverage > Configuration loading with actual test config > should identify environment variable tokens correctly
 99 |     });
100 | 
101 |     it('should get raw token value', () => {
102 |       const rawToken = configLoader.getRawTokenValue('0');
103 | 
104 |       expect(rawToken).toBe('${T_INVEST_TOKEN}');
                             ^
error: expect(received).toBe(expected)

Expected: "${T_INVEST_TOKEN}"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:104:24)
(fail) ConfigLoader Enhanced Coverage > Configuration loading with actual test config > should get raw token value
157 | 
158 |   describe('Token resolution and environment variables with test config', () => {
159 |     it('should resolve token from environment variable using test config', () => {
160 |       const token = configLoader.getAccountToken('0');
161 | 
162 |       expect(token).toBe('test-token-from-env');
                          ^
error: expect(received).toBe(expected)

Expected: "test-token-from-env"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:162:21)
(fail) ConfigLoader Enhanced Coverage > Token resolution and environment variables with test config > should resolve token from environment variable using test config [1.00ms]
174 |     });
175 | 
176 |     it('should return raw token value from test config', () => {
177 |       const rawToken = configLoader.getRawTokenValue('0');
178 | 
179 |       expect(rawToken).toBe('${T_INVEST_TOKEN}');
                             ^
error: expect(received).toBe(expected)

Expected: "${T_INVEST_TOKEN}"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:179:24)
(fail) ConfigLoader Enhanced Coverage > Token resolution and environment variables with test config > should return raw token value from test config [1.00ms]
190 | 
191 |       expect(rawToken).toBeUndefined();
192 |     });
193 | 
194 |     it('should correctly identify tokens from environment variables', () => {
195 |       expect(configLoader.isTokenFromEnv('0')).toBe(true);
                                                     ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:195:48)
(fail) ConfigLoader Enhanced Coverage > Token resolution and environment variables with test config > should correctly identify tokens from environment variables [1.00ms]
197 |     });
198 | 
199 |     it('should return account_id for existing account', () => {
200 |       const accountId = configLoader.getAccountAccountId('0');
201 | 
202 |       expect(accountId).toBe('0');
                              ^
error: expect(received).toBe(expected)

Expected: "0"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:202:25)
(fail) ConfigLoader Enhanced Coverage > Token resolution and environment variables with test config > should return account_id for existing account
211 | 
212 |   describe('Account retrieval methods with test config', () => {
213 |     it('should find account by ID', () => {
214 |       const account = configLoader.getAccountById('0');
215 | 
216 |       expect(account).toBeDefined();
                            ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:216:23)
(fail) ConfigLoader Enhanced Coverage > Account retrieval methods with test config > should find account by ID [1.00ms]
225 |     });
226 | 
227 |     it('should find account by token (environment variable format)', () => {
228 |       const account = configLoader.getAccountByToken('${T_INVEST_TOKEN}');
229 | 
230 |       expect(account).toBeDefined();
                            ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:230:23)
(fail) ConfigLoader Enhanced Coverage > Account retrieval methods with test config > should find account by token (environment variable format) [1.00ms]
239 |     });
240 | 
241 |     it('should return all accounts', () => {
242 |       const allAccounts = configLoader.getAllAccounts();
243 | 
244 |       expect(allAccounts).toHaveLength(1);
                                ^
error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 3

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:244:27)
(fail) ConfigLoader Enhanced Coverage > Account retrieval methods with test config > should return all accounts [3.00ms]
274 | 
275 |       expect(instance1).toBe(instance2);
276 |     });
277 | 
278 |     it('should support test config loader factory', () => {
279 |       const testConfigLoader = require('../../configLoader').getTestConfigLoader();
                                                                   ^
TypeError: require("../../configLoader").getTestConfigLoader is not a function. (In 'require("../../configLoader").getTestConfigLoader()', 'require("../../configLoader").getTestConfigLoader' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:279:62)
(fail) ConfigLoader Enhanced Coverage > Singleton pattern with test environment > should support test config loader factory [3.00ms]
300 |       }
301 |     });
302 | 
303 |     it('should validate token format detection correctly', () => {
304 |       // Test with environment variable format
305 |       expect(configLoader.isTokenFromEnv('0')).toBe(true);
                                                     ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:305:48)
(fail) ConfigLoader Enhanced Coverage > Edge cases and realistic scenarios > should validate token format detection correctly [2.00ms]
332 | 
333 |       const walletTickers = Object.keys(account.desired_wallet);
334 | 
335 |       // Check that all wallet tickers are in expected list
336 |       walletTickers.forEach(ticker => {
337 |         expect(expectedTickers).toContain(ticker);
                                      ^
error: expect(received).toContain(expected)

Expected to contain: "RUB"
Received: [
  "TRAY", "TGLD", "TRUR", "TRND", "TBRU", "TDIV", "TITR", "TLCB", "TMON", "TMOS", "TOFZ", "TPAY"
]

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:337:33)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/enhanced-configLoader.test.ts:336:21)
(fail) ConfigLoader Enhanced Coverage > Edge cases and realistic scenarios > should validate desired_wallet contains valid ETF tickers [1.00ms]

src/__tests__/configLoader/configLoader.test.ts:
121 | 
122 |       const config = configLoader.loadConfig();
123 | 
124 |       expect(config).toBeDefined();
125 |       expect(config.accounts).toBeDefined();
126 |       expect(config.accounts).toHaveLength(1);
                                    ^
error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:126:31)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Loading > should load configuration from CONFIG.json [2.00ms]
128 | 
129 |     it('should cache loaded configuration', () => {
130 |       const config1 = configLoader.loadConfig();
131 |       const config2 = configLoader.loadConfig();
132 | 
133 |       expect(config1).toBe(config2); // Same reference
                            ^
error: expect(received).toBe(expected)

Expected: {
  accounts: [],
}
Received: serializes to the same string

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:133:23)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Loading > should cache loaded configuration
144 |       };
145 | 
146 |       // Clear config cache
147 |       (configLoader as any).config = null;
148 | 
149 |       expect(() => configLoader.loadConfig()).toThrow('Configuration loading error');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "Configuration loading error"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:149:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Loading > should handle file not found error [1.00ms]
159 |       fs.readFileSync = () => 'invalid json {';
160 | 
161 |       // Clear config cache
162 |       (configLoader as any).config = null;
163 | 
164 |       expect(() => configLoader.loadConfig()).toThrow('Configuration loading error');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "Configuration loading error"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:164:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Loading > should handle invalid JSON
178 |       };
179 | 
180 |       // Clear config cache
181 |       (configLoader as any).config = null;
182 | 
183 |       expect(() => configLoader.loadConfig()).toThrow('Configuration loading error');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "Configuration loading error"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:183:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Loading > should handle permission denied error [1.00ms]
628 |     });
629 | 
630 |     it('should handle configuration errors gracefully', async () => {
631 |       // Set up failing config loader
632 |       mockConfigLoader.getAccountById.mockImplementation(() => {
633 |         throw new Error('Configuration Error');
                                                   ^
error: Configuration Error
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:633:46)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:199:36)
(fail) ConfigLoader Module Comprehensive Tests > Account Retrieval > should get account by ID [1.00ms]
628 |     });
629 | 
630 |     it('should handle configuration errors gracefully', async () => {
631 |       // Set up failing config loader
632 |       mockConfigLoader.getAccountById.mockImplementation(() => {
633 |         throw new Error('Configuration Error');
                                                   ^
error: Configuration Error
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:633:46)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:207:36)
(fail) ConfigLoader Module Comprehensive Tests > Account Retrieval > should return undefined for non-existent account ID
208 | 
209 |       expect(account).toBeUndefined();
210 |     });
211 | 
212 |     it('should get account by token', () => {
213 |       const account = configLoader.getAccountByToken('test-token-value');  // Changed to match actual config
                                         ^
TypeError: configLoader.getAccountByToken is not a function. (In 'configLoader.getAccountByToken("test-token-value")', 'configLoader.getAccountByToken' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:213:36)
(fail) ConfigLoader Module Comprehensive Tests > Account Retrieval > should get account by token [1.00ms]
215 |       expect(account).toBeDefined();
216 |       expect(account?.id).toBe('0');  // Changed to match actual config
217 |     });
218 | 
219 |     it('should return undefined for non-existent token', () => {
220 |       const account = configLoader.getAccountByToken('invalid-token');
                                         ^
TypeError: configLoader.getAccountByToken is not a function. (In 'configLoader.getAccountByToken("invalid-token")', 'configLoader.getAccountByToken' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:220:36)
(fail) ConfigLoader Module Comprehensive Tests > Account Retrieval > should return undefined for non-existent token
223 |     });
224 | 
225 |     it('should get all accounts', () => {
226 |       const accounts = configLoader.getAllAccounts();
227 | 
228 |       expect(accounts).toHaveLength(1);  // Changed to match actual config
                             ^
error: expect(received).toHaveLength(expected)

Expected length: 1
Received length: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:228:24)
(fail) ConfigLoader Module Comprehensive Tests > Account Retrieval > should get all accounts [2.00ms]
239 |     });
240 | 
241 |     it('should get direct token value', () => {
242 |       const token = configLoader.getAccountToken('0');  // Changed to match actual config
243 | 
244 |       expect(token).toBe('test-token-value');  // Changed to match actual config
                          ^
error: expect(received).toBe(expected)

Expected: "test-token-value"
Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:244:21)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should get direct token value [1.00ms]
245 |     });
246 | 
247 |     it('should get token from environment variable', () => {
248 |       const token = configLoader.getAccountToken('0');  // Changed to match actual config
249 | 
250 |       expect(token).toBe('test-token-value');  // Changed to match actual config
                          ^
error: expect(received).toBe(expected)

Expected: "test-token-value"
Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:250:21)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should get token from environment variable [1.00ms]
256 |       // Clear config cache to force reload
257 |       (configLoader as any).config = null;
258 | 
259 |       const token = configLoader.getAccountToken('0');  // Changed to match actual config
260 | 
261 |       expect(token).toBeUndefined();
                          ^
error: expect(received).toBeUndefined()

Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:261:21)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should return undefined for missing environment variable
262 |     });
263 | 
264 |     it('should return undefined for non-existent account in getAccountToken', () => {
265 |       const token = configLoader.getAccountToken('non-existent-account');
266 | 
267 |       expect(token).toBeUndefined();
                          ^
error: expect(received).toBeUndefined()

Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:267:21)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should return undefined for non-existent account in getAccountToken [1.00ms]
266 | 
267 |       expect(token).toBeUndefined();
268 |     });
269 | 
270 |     it('should get raw token value', () => {
271 |       const rawToken = configLoader.getRawTokenValue('0');  // Changed to match actual config
                                          ^
TypeError: configLoader.getRawTokenValue is not a function. (In 'configLoader.getRawTokenValue("0")', 'configLoader.getRawTokenValue' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:271:37)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should get raw token value
272 | 
273 |       expect(rawToken).toBe('${T_INVEST_TOKEN}');  // Changed to match actual config
274 |     });
275 | 
276 |     it('should return undefined for non-existent account in getRawTokenValue', () => {
277 |       const rawToken = configLoader.getRawTokenValue('non-existent');
                                          ^
TypeError: configLoader.getRawTokenValue is not a function. (In 'configLoader.getRawTokenValue("non-existent")', 'configLoader.getRawTokenValue' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:277:37)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should return undefined for non-existent account in getRawTokenValue [1.00ms]
278 | 
279 |       expect(rawToken).toBeUndefined();
280 |     });
281 | 
282 |     it('should detect if token is from environment', () => {
283 |       expect(configLoader.isTokenFromEnv('0')).toBe(true);  // Changed to match actual config (token is from env)
                                ^
TypeError: configLoader.isTokenFromEnv is not a function. (In 'configLoader.isTokenFromEnv("0")', 'configLoader.isTokenFromEnv' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:283:27)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should detect if token is from environment [1.00ms]
282 |     it('should detect if token is from environment', () => {
283 |       expect(configLoader.isTokenFromEnv('0')).toBe(true);  // Changed to match actual config (token is from env)
284 |     });
285 | 
286 |     it('should return false for non-existent account in token checks', () => {
287 |       expect(configLoader.isTokenFromEnv('non-existent')).toBe(false);
                                ^
TypeError: configLoader.isTokenFromEnv is not a function. (In 'configLoader.isTokenFromEnv("non-existent")', 'configLoader.isTokenFromEnv' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:287:27)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should return false for non-existent account in token checks [1.00ms]
304 | 
305 |       setMockFile('/test/workspace/CONFIG.json', JSON.stringify(configWithMalformedToken));
306 |       (configLoader as any).config = null;
307 | 
308 |       const token = configLoader.getAccountToken('malformed');
309 |       expect(token).toBe('${INCOMPLETE'); // Should return as-is when malformed
                          ^
error: expect(received).toBe(expected)

Expected: "${INCOMPLETE"
Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:309:21)
(fail) ConfigLoader Module Comprehensive Tests > Token Management > should handle malformed environment variable syntax [2.00ms]
318 |       // Clear config cache to force reload
319 |       (configLoader as any).config = null;
320 |     });
321 | 
322 |     it('should get account_id by account ID', () => {
323 |       const accountId = configLoader.getAccountAccountId('0');  // Changed to match actual config
                                           ^
TypeError: configLoader.getAccountAccountId is not a function. (In 'configLoader.getAccountAccountId("0")', 'configLoader.getAccountAccountId' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:323:38)
(fail) ConfigLoader Module Comprehensive Tests > Account ID Management > should get account_id by account ID
324 | 
325 |       expect(accountId).toBe('0');  // Changed to match actual config
326 |     });
327 | 
328 |     it('should return undefined for non-existent account', () => {
329 |       const accountId = configLoader.getAccountAccountId('non-existent');
                                           ^
TypeError: configLoader.getAccountAccountId is not a function. (In 'configLoader.getAccountAccountId("non-existent")', 'configLoader.getAccountAccountId' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:329:38)
(fail) ConfigLoader Module Comprehensive Tests > Account ID Management > should return undefined for non-existent account [1.00ms]
336 |     it('should validate configuration with missing accounts array', () => {
337 |       const invalidConfig = {};
338 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(invalidConfig));
339 |       (configLoader as any).config = null;
340 | 
341 |       expect(() => configLoader.loadConfig()).toThrow('Configuration must contain accounts array');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "Configuration must contain accounts array"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:341:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Validation > should validate configuration with missing accounts array [1.00ms]
344 |     it('should validate configuration with non-array accounts', () => {
345 |       const invalidConfig = { accounts: 'not an array' };
346 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(invalidConfig));
347 |       (configLoader as any).config = null;
348 | 
349 |       expect(() => configLoader.loadConfig()).toThrow('Configuration must contain accounts array');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "Configuration must contain accounts array"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:349:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Validation > should validate configuration with non-array accounts [1.00ms]
361 |         ]
362 |       };
363 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(invalidConfig));
364 |       (configLoader as any).config = null;
365 | 
366 |       expect(() => configLoader.loadConfig()).toThrow('must contain field');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "must contain field"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:366:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Validation > should validate account with missing required fields [1.00ms]
379 |         ]
380 |       };
381 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(invalidConfig));
382 |       (configLoader as any).config = null;
383 | 
384 |       expect(() => configLoader.loadConfig()).toThrow('must contain non-empty desired_wallet');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "must contain non-empty desired_wallet"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:384:47)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Validation > should validate account with empty desired_wallet
403 | 
404 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(configWithBadWeights));
405 |       (configLoader as any).config = null;
406 | 
407 |       expect(() => configLoader.loadConfig()).not.toThrow();
408 |       expect((consoleSpy as any).called).toBe(true);
                                               ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:408:42)
(fail) ConfigLoader Module Comprehensive Tests > Configuration Validation > should warn about incorrect weight sum [2.00ms]
429 |       (configLoader as any).config = null;
430 | 
431 |       const config = configLoader.loadConfig();
432 |       const account = config.accounts[0];
433 | 
434 |       expect(account.exchange_closure_behavior).toBeDefined();
                   ^
TypeError: undefined is not an object (evaluating 'account.exchange_closure_behavior')
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:434:14)
(fail) ConfigLoader Module Comprehensive Tests > Exchange Closure Behavior Validation > should set default exchange closure behavior if not provided [1.00ms]
454 |       };
455 | 
456 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(configWithInvalidBehavior));
457 |       (configLoader as any).config = null;
458 | 
459 |       expect(() => configLoader.loadConfig()).toThrow('exchange_closure_behavior.mode must be one of');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "exchange_closure_behavior.mode must be one of"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:459:47)
(fail) ConfigLoader Module Comprehensive Tests > Exchange Closure Behavior Validation > should validate invalid exchange closure mode [2.00ms]
477 |       };
478 | 
479 |       setMockFile('/test/workspace/CONFIG.test.json', JSON.stringify(configWithInvalidBehavior));
480 |       (configLoader as any).config = null;
481 | 
482 |       expect(() => configLoader.loadConfig()).toThrow('update_iteration_result must be a boolean');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "update_iteration_result must be a boolean"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:482:47)
(fail) ConfigLoader Module Comprehensive Tests > Exchange Closure Behavior Validation > should validate invalid update_iteration_result type [1.00ms]
490 |       fs.readFileSync = () => {
491 |         throw 'String error'; // Non-Error object
492 |       };
493 | 
494 |       (configLoader as any).config = null;
495 |       expect(() => configLoader.loadConfig()).toThrow('Unknown error');
                                                    ^
error: expect(received).toThrow(expected)

Expected substring: "Unknown error"

Received function did not throw
Received value: {
  accounts: [],
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:495:47)
(fail) ConfigLoader Module Comprehensive Tests > Error Scenarios and Edge Cases > should handle unknown error types [1.00ms]
520 |       setMockFile('/test/workspace/CONFIG.json', JSON.stringify(complexConfig));
521 |       process.env.ENV_TOKEN = 't.env_value';
522 |       (configLoader as any).config = null;
523 | 
524 |       const config = configLoader.loadConfig();
525 |       expect(config.accounts).toHaveLength(2);
                                    ^
error: expect(received).toHaveLength(expected)

Expected length: 2
Received length: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configLoader.test.ts:525:31)
(fail) ConfigLoader Module Comprehensive Tests > Error Scenarios and Edge Cases > should handle complex multi-account scenarios

src/__tests__/configLoader/actual-config-test.test.ts:
25 |   it('should load configuration from actual CONFIG.test.json', () => {
26 |     const config = configLoader.loadConfig();
27 | 
28 |     expect(config).toBeDefined();
29 |     expect(config.accounts).toBeDefined();
30 |     expect(config.accounts.length).toBeGreaterThan(0);
                                        ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/actual-config-test.test.ts:30:36)
(fail) ConfigLoader with Actual Config File > should load configuration from actual CONFIG.test.json [1.00ms]
628 |     });
629 | 
630 |     it('should handle configuration errors gracefully', async () => {
631 |       // Set up failing config loader
632 |       mockConfigLoader.getAccountById.mockImplementation(() => {
633 |         throw new Error('Configuration Error');
                                                   ^
error: Configuration Error
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:633:46)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/actual-config-test.test.ts:34:34)
(fail) ConfigLoader with Actual Config File > should get account by ID from actual config [1.00ms]
38 |   });
39 | 
40 |   it('should get account token from actual config', () => {
41 |     const token = configLoader.getAccountToken('0');
42 | 
43 |     expect(token).toBe('test-token-value');
                       ^
error: expect(received).toBe(expected)

Expected: "test-token-value"
Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/actual-config-test.test.ts:43:19)
(fail) ConfigLoader with Actual Config File > should get account token from actual config
42 | 
43 |     expect(token).toBe('test-token-value');
44 |   });
45 | 
46 |   it('should get account_id from actual config', () => {
47 |     const accountId = configLoader.getAccountAccountId('0');
                                        ^
TypeError: configLoader.getAccountAccountId is not a function. (In 'configLoader.getAccountAccountId("0")', 'configLoader.getAccountAccountId' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/actual-config-test.test.ts:47:36)
(fail) ConfigLoader with Actual Config File > should get account_id from actual config

src/__tests__/configLoader/three-easy-fixes.test.ts:
628 |     });
629 | 
630 |     it('should handle configuration errors gracefully', async () => {
631 |       // Set up failing config loader
632 |       mockConfigLoader.getAccountById.mockImplementation(() => {
633 |         throw new Error('Configuration Error');
                                                   ^
error: Configuration Error
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/integration/portfolio-rebalancing-workflow.test.ts:633:46)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/three-easy-fixes.test.ts:76:34)
(fail) Three Easiest ConfigLoader Tests to Fix > should get account by ID [2.00ms]
83 |   // Test 2: Token Management Test - use actual config structure
84 |   it('should get direct token value', () => {
85 |     // CONFIG.test.json has account with id "0" and token from env variable
86 |     const token = configLoader.getAccountToken('0');
87 | 
88 |     expect(token).toBe('test-token-value');
                       ^
error: expect(received).toBe(expected)

Expected: "test-token-value"
Received: "t.test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/three-easy-fixes.test.ts:88:19)
(fail) Three Easiest ConfigLoader Tests to Fix > should get direct token value [1.00ms]
89 |   });
90 | 
91 |   // Test 3: Account ID Management Test - use actual config structure
92 |   it('should get account_id by account ID', () => {
93 |     // CONFIG.test.json has account with id "0" and account_id "0"
94 |     const accountId = configLoader.getAccountAccountId('0');
                                        ^
TypeError: configLoader.getAccountAccountId is not a function. (In 'configLoader.getAccountAccountId("0")', 'configLoader.getAccountAccountId' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/three-easy-fixes.test.ts:94:36)
(fail) Three Easiest ConfigLoader Tests to Fix > should get account_id by account ID [1.00ms]

src/__tests__/configLoader/config-error-handling.test.ts:
137 |         // Verify error was logged
138 |         expect(errorSpy).toHaveBeenCalled();
139 |       } catch (error) {
140 |         // Verify graceful error handling
141 |         expect(error).toBeDefined();
142 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:142:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > File System Error Handling > should gracefully handle missing configuration file [3.00ms]
175 |         // Verify error was logged
176 |         expect(errorSpy).toHaveBeenCalled();
177 |       } catch (error) {
178 |         // Verify graceful error handling
179 |         expect(error).toBeDefined();
180 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:180:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > File System Error Handling > should handle permission denied errors gracefully [2.00ms]
213 |         // Verify error was logged
214 |         expect(errorSpy).toHaveBeenCalled();
215 |       } catch (error) {
216 |         // Verify graceful error handling
217 |         expect(error).toBeDefined();
218 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:218:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > File System Error Handling > should handle disk full errors gracefully [1.00ms]
251 |         // Verify error was logged
252 |         expect(errorSpy).toHaveBeenCalled();
253 |       } catch (error) {
254 |         // Verify graceful error handling
255 |         expect(error).toBeDefined();
256 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:256:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > JSON Parsing Error Handling > should gracefully handle invalid JSON syntax [1.00ms]
298 |         // Verify error was logged
299 |         expect(errorSpy).toHaveBeenCalled();
300 |       } catch (error) {
301 |         // Verify graceful error handling
302 |         expect(error).toBeDefined();
303 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:303:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > JSON Parsing Error Handling > should handle malformed JSON with trailing commas [2.00ms]
345 |         // Verify error was logged
346 |         expect(errorSpy).toHaveBeenCalled();
347 |       } catch (error) {
348 |         // Verify graceful error handling
349 |         expect(error).toBeDefined();
350 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:350:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > JSON Parsing Error Handling > should handle JSON with control characters [2.00ms]
505 |         // Verify error was logged
506 |         expect(errorSpy).toHaveBeenCalled();
507 |       } catch (error) {
508 |         // Verify graceful error handling
509 |         expect(error).toBeDefined();
510 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:510:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > Graceful Degradation Strategies > should fall back to default configuration when primary config fails [2.00ms]
598 |         // Verify informative error message was logged
599 |         expect(errorSpy).toHaveBeenCalled();
600 |       } catch (error) {
601 |         // Verify graceful error handling with informative message
602 |         expect(error).toBeDefined();
603 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:603:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > Graceful Degradation Strategies > should provide informative error messages for troubleshooting [2.00ms]
84 |         // Configuration validation
85 |         this.validateConfig(this.config);
86 | 
87 |         return this.config;
88 |       } catch (error) {
89 |         throw new Error(`Configuration loading error: ${error instanceof Error ? error.message : 'Unknown error'}`);
                       ^
error: Configuration loading error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at loadConfig (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configuration-scenarios.test.ts:89:19)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:652:37)
(fail) Configuration Error Handling with Graceful Degradation Tests > Recovery and Retry Mechanisms > should attempt to reload configuration after file system errors [2.00ms]
84 |         // Configuration validation
85 |         this.validateConfig(this.config);
86 | 
87 |         return this.config;
88 |       } catch (error) {
89 |         throw new Error(`Configuration loading error: ${error instanceof Error ? error.message : 'Unknown error'}`);
                       ^
error: Configuration loading error: ENOENT: no such file or directory, open '/tmp/gh-issue-solver-1758074196784/CONFIG.json'
      at loadConfig (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/configuration-scenarios.test.ts:89:19)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:706:37)
(fail) Configuration Error Handling with Graceful Degradation Tests > Recovery and Retry Mechanisms > should handle intermittent network file system errors [3.00ms]
747 |         // Verify error context was preserved
748 |         expect(errorSpy).toHaveBeenCalled();
749 |       } catch (error) {
750 |         // Verify error context preservation
751 |         expect(error).toBeDefined();
752 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:752:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > Error Context Preservation > should preserve error context for debugging [2.00ms]
786 |         // Verify file path was included in error handling
787 |         expect(errorSpy).toHaveBeenCalled();
788 |       } catch (error) {
789 |         // Verify file path inclusion
790 |         expect(error).toBeDefined();
791 |         expect(error.message).toContain('Configuration loading error');
                                    ^
error: expect(received).toContain(expected)

Expected to contain: "Configuration loading error"
Received: "expect(received).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls: 0\n"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/config-error-handling.test.ts:791:31)
(fail) Configuration Error Handling with Graceful Degradation Tests > Error Context Preservation > should include relevant file paths in error messages [4.00ms]

src/__tests__/configLoader/simple-test.test.ts:
56 | };
57 | 
58 | describe('Simple ConfigLoader Test', () => {
59 |   beforeEach(() => {
60 |     // Reset the singleton instance to ensure clean state
61 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/simple-test.test.ts:61:18)
(fail) Simple ConfigLoader Test > should get account by ID [5.00ms]
(fail) should get account by ID

src/__tests__/configLoader/feature-activation.test.ts:
376 | 
377 |       // Get account configuration
378 |       const accountConfig = mockConfigLoader.getAccountById('test-disabled-features-account');
379 | 
380 |       // Verify mixed states
381 |       expect(accountConfig).toBeDefined();
                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:381:29)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:374:67)
(fail) Configuration Feature Activation Tests > Feature Activation Combinations > should correctly handle mixed feature activation states [2.00ms]
493 | 
494 |       // Verify some features are activated
495 |       const activatedFeatures = activationResults.filter(result =>
496 |         result.marginTrading || result.buyRequires || result.exchangeClosure
497 |       );
498 |       expect(activatedFeatures.length).toBeGreaterThan(0);
                                             ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:498:40)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:464:80)
(fail) Configuration Feature Activation Tests > Feature Activation Performance > should activate features efficiently without performance degradation [1.00ms]
565 |         buyRequiresEnabled: accountConfig?.buy_requires_total_marginal_sell?.enabled,
566 |         exchangeClosureMode: accountConfig?.exchange_closure_behavior?.mode
567 |       };
568 | 
569 |       // Verify that the bot would initialize with the correct feature states
570 |       expect(botInitialization.accountId).toBe('test-margin-account');
                                                ^
error: expect(received).toBe(expected)

Expected: "test-margin-account"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:570:43)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:552:77)
(fail) Configuration Feature Activation Tests > Feature Activation Integration > should integrate feature activation with actual bot functionality [1.00ms]
598 |       // New state
599 |       const updatedConfig = mockConfigLoader.getAccountById('test-margin-account');
600 |       const finallyActive = updatedConfig?.margin_trading?.enabled === true;
601 | 
602 |       // Should detect the change
603 |       expect(initiallyActive).toBe(true);
                                    ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:603:31)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/feature-activation.test.ts:576:67)
(fail) Configuration Feature Activation Tests > Feature Activation Integration > should handle feature activation changes during runtime [1.00ms]

src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:
12 | 
13 |     // Set NODE_ENV to test
14 |     process.env.NODE_ENV = 'test';
15 | 
16 |     // Reset ConfigLoader instance to ensure clean state
17 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:17:18)
(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should validate correct buy_requires_total_marginal_sell configuration [3.00ms]

# Unhandled error between tests
-------------------------------
20 |   afterEach(() => {
21 |     // Restore original environment
22 |     process.env = originalEnv;
23 | 
24 |     // Reset ConfigLoader instance
25 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:25:18)
-------------------------------

(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should validate correct buy_requires_total_marginal_sell configuration
12 | 
13 |     // Set NODE_ENV to test
14 |     process.env.NODE_ENV = 'test';
15 | 
16 |     // Reset ConfigLoader instance to ensure clean state
17 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:17:18)
(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid enabled field

# Unhandled error between tests
-------------------------------
20 |   afterEach(() => {
21 |     // Restore original environment
22 |     process.env = originalEnv;
23 | 
24 |     // Reset ConfigLoader instance
25 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:25:18)
-------------------------------

(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid enabled field
12 | 
13 |     // Set NODE_ENV to test
14 |     process.env.NODE_ENV = 'test';
15 | 
16 |     // Reset ConfigLoader instance to ensure clean state
17 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:17:18)
(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid instruments field

# Unhandled error between tests
-------------------------------
20 |   afterEach(() => {
21 |     // Restore original environment
22 |     process.env = originalEnv;
23 | 
24 |     // Reset ConfigLoader instance
25 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:25:18)
-------------------------------

(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid instruments field
12 | 
13 |     // Set NODE_ENV to test
14 |     process.env.NODE_ENV = 'test';
15 | 
16 |     // Reset ConfigLoader instance to ensure clean state
17 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:17:18)
(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should accept instruments not in desired_wallet (they represent non-margin assets on exchange)

# Unhandled error between tests
-------------------------------
20 |   afterEach(() => {
21 |     // Restore original environment
22 |     process.env = originalEnv;
23 | 
24 |     // Reset ConfigLoader instance
25 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:25:18)
-------------------------------

(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should accept instruments not in desired_wallet (they represent non-margin assets on exchange)
12 | 
13 |     // Set NODE_ENV to test
14 |     process.env.NODE_ENV = 'test';
15 | 
16 |     // Reset ConfigLoader instance to ensure clean state
17 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:17:18)
(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid mode [1.00ms]

# Unhandled error between tests
-------------------------------
20 |   afterEach(() => {
21 |     // Restore original environment
22 |     process.env = originalEnv;
23 | 
24 |     // Reset ConfigLoader instance
25 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:25:18)
-------------------------------

(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid mode
12 | 
13 |     // Set NODE_ENV to test
14 |     process.env.NODE_ENV = 'test';
15 | 
16 |     // Reset ConfigLoader instance to ensure clean state
17 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:17:18)
(fail) Buy Requires Total Marginal Sell Configuration Tests > Configuration Validation > should reject invalid min_buy_rebalance_percent

# Unhandled error between tests
-------------------------------
20 |   afterEach(() => {
21 |     // Restore original environment
22 |     process.env = originalEnv;
23 | 
24 |     // Reset ConfigLoader instance
25 |     ConfigLoader.resetInstance();
                      ^
TypeError: ConfigLoader.resetInstance is not a function. (In 'ConfigLoader.resetInstance()', 'ConfigLoader.resetInstance' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/configLoader/buy-requires-total-marginal-sell.test.ts:25:18)
-------------------------------

(fail) Buy Requires Total Marginal Sell Configuration Tests > should reject invalid min_buy_rebalance_percent

src/__tests__/test-setup/enhanced-test-setup.test.ts:
35 |     it('should set NODE_ENV to test', () => {
36 |       expect(process.env.NODE_ENV).toBe('test');
37 |     });
38 | 
39 |     it('should set test token environment variable', () => {
40 |       expect(process.env.TOKEN).toBe('test-token');
                                     ^
error: expect(received).toBe(expected)

Expected: "test-token"
Received: "test_token"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/test-setup/enhanced-test-setup.test.ts:40:33)
(fail) Test Setup Enhanced Coverage > Environment setup > should set test token environment variable [1.00ms]

src/__tests__/tools/enhanced-etfCap.test.ts:
296 | 
297 |     it('should parse money strings to numbers', () => {
298 |       // Use the actual implementation from the file
299 |       const { parseMoneyToNumber } = etfCapModule;
300 | 
301 |       expect(parseMoneyToNumber('1 234 567,89 руб')).toBe(1234567.89);
                   ^
TypeError: parseMoneyToNumber is not a function. (In 'parseMoneyToNumber("1 234 567,89 \u0440\u0443\u0431")', 'parseMoneyToNumber' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/enhanced-etfCap.test.ts:301:14)
(fail) EtfCap Tool Tests > HTML processing functions > should parse money strings to numbers [2.00ms]
443 |           </tr>
444 |         </table>
445 |       `;
446 | 
447 |       const interestedTickers = new Set(['TRUR', 'TMOS']);
448 |       const result = parseAumTable(tableHtml, interestedTickers);
                           ^
TypeError: parseAumTable is not a function. (In 'parseAumTable(`
        <table>
          <tr>
            <th>\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435</th>
            <th>\u0421\u0427\u0410 \u0437\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0439 \u0434\u0435\u043D\u044C</th>
          </tr>
          <tr>
            <td>TRUR \u0412\u0435\u0447\u043D\u044B\u0439 \u043F\u043E\u0440\u0442\u0444\u0435\u043B\u044C</td>
            <td>1 234 567,89 \u0440\u0443\u0431</td>
          </tr>
          <tr>
            <td>TMOS \u041C\u043E\u0441\u043A\u043E\u0432\u0441\u043A\u0430\u044F \u0431\u0438\u0440\u0436\u0430</td>
            <td>$2,345.67</td>
          </tr>
        </table>
      `, new Set(["TRUR", "TMOS"]))', 'parseAumTable' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/enhanced-etfCap.test.ts:448:22)
(fail) EtfCap Tool Tests > AUM table parsing > should parse AUM table with known tickers

src/__tests__/tools/etfCap-coverage.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'parseMoneyToNumber' not found in module '/tmp/gh-issue-solver-1758074196784/src/tools/etfCap.ts'.
      at loadAndEvaluateModule (1:11)
      at linkAndEvaluateModule (1:11)
      at loadAndEvaluateModule (2:1)
      at processTicksAndRejections (7:39)
-------------------------------


src/__tests__/tools/etfCap-aum-currencies.test.ts:
221 |       const result = await buildAumMapSmart(['TRUR']);
222 | 
223 |       expect(result).toBeDefined();
224 |       expect(typeof result).toBe('object');
225 |       expect(result.TRUR).toBeDefined();
226 |       expect(result.TRUR.amount).toBe(1500000000);
                                       ^
error: expect(received).toBe(expected)

Expected: 1500000000
Received: 2000000000

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:226:34)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Fetching with Various Currencies > should fetch AUM data with RUB currency correctly [2.00ms]
254 |       const result = await buildAumMapSmart(['TUSD']);
255 | 
256 |       expect(result).toBeDefined();
257 |       expect(typeof result).toBe('object');
258 |       expect(result.TUSD).toBeDefined();
259 |       expect(result.TUSD.amount).toBe(50000000);
                                       ^
error: expect(received).toBe(expected)

Expected: 50000000
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:259:34)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Fetching with Various Currencies > should fetch AUM data with USD currency correctly [1.00ms]
287 |       const result = await buildAumMapSmart(['TEUR']);
288 | 
289 |       expect(result).toBeDefined();
290 |       expect(typeof result).toBe('object');
291 |       expect(result.TEUR).toBeDefined();
292 |       expect(result.TEUR.amount).toBe(30000000);
                                       ^
error: expect(received).toBe(expected)

Expected: 30000000
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:292:34)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Fetching with Various Currencies > should fetch AUM data with EUR currency correctly [1.00ms]
332 |       expect(result).toBeDefined();
333 |       expect(typeof result).toBe('object');
334 | 
335 |       // Check RUB currency
336 |       expect(result.TRUR).toBeDefined();
337 |       expect(result.TRUR.amount).toBe(1500000000);
                                       ^
error: expect(received).toBe(expected)

Expected: 1500000000
Received: 2000000000

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:337:34)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Fetching with Various Currencies > should handle mixed currency AUM data correctly [1.00ms]
417 |             price: { units: 95, nano: 0 } // 95 RUB per USD
418 |           }
419 |         ]
420 |       });
421 | 
422 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:422:26)
(fail) AUM Data Processing with Various Currencies Tests > Currency Conversion for AUM Data > should convert USD AUM to RUB correctly
447 |             price: { units: 105, nano: 0 } // 105 RUB per EUR
448 |           }
449 |         ]
450 |       });
451 | 
452 |       const rate = await getFxRateToRub('EUR');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("EUR")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:452:26)
(fail) AUM Data Processing with Various Currencies Tests > Currency Conversion for AUM Data > should convert EUR AUM to RUB correctly [1.00ms]
455 | 
456 |     it('should return 1 for RUB currency (no conversion needed)', async () => {
457 |       // Import the function inside the test
458 |       const { getFxRateToRub } = await import('../../tools/etfCap');
459 | 
460 |       const rate = await getFxRateToRub('RUB');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("RUB")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:460:26)
(fail) AUM Data Processing with Various Currencies Tests > Currency Conversion for AUM Data > should return 1 for RUB currency (no conversion needed) [1.00ms]
468 |       // Mock empty currency response
469 |       mockTinkoffSDK.instruments.currencies.mockResolvedValue({
470 |         instruments: []
471 |       });
472 | 
473 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:473:26)
(fail) AUM Data Processing with Various Currencies Tests > Currency Conversion for AUM Data > should handle missing currency instruments gracefully [1.00ms]
498 |             price: undefined // Invalid price
499 |           }
500 |         ]
501 |       });
502 | 
503 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:503:26)
(fail) AUM Data Processing with Various Currencies Tests > Currency Conversion for AUM Data > should handle invalid price data gracefully
533 |       const result = await buildAumMapSmart(['TZERO']);
534 | 
535 |       expect(result).toBeDefined();
536 |       expect(typeof result).toBe('object');
537 |       // Zero amounts should not be included in the result
538 |       expect(result.TZERO).toBeUndefined();
                                 ^
error: expect(received).toBeUndefined()

Received: {
  amount: 0,
  currency: "RUB",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:538:28)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Processing Edge Cases with Currencies > should handle AUM data with zero amounts [1.00ms]
565 |       const result = await buildAumMapSmart(['TNEG']);
566 | 
567 |       expect(result).toBeDefined();
568 |       expect(typeof result).toBe('object');
569 |       // Negative amounts should not be included in the result
570 |       expect(result.TNEG).toBeUndefined();
                                ^
error: expect(received).toBeUndefined()

Received: {
  amount: 0,
  currency: "RUB",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:570:27)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Processing Edge Cases with Currencies > should handle AUM data with negative amounts [1.00ms]
597 |       const result = await buildAumMapSmart(['TLARGE']);
598 | 
599 |       expect(result).toBeDefined();
600 |       expect(typeof result).toBe('object');
601 |       expect(result.TLARGE).toBeDefined();
602 |       expect(result.TLARGE.amount).toBe(9999999999999);
                                         ^
error: expect(received).toBe(expected)

Expected: 9999999999999
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:602:36)
(fail) AUM Data Processing with Various Currencies Tests > AUM Data Processing Edge Cases with Currencies > should handle AUM data with extremely large numbers
684 |         ]
685 |       });
686 | 
687 |       // Test the complete workflow: fetch AUM data + convert to RUB
688 |       const aumResult = await buildAumMapSmart(['TUSD']);
689 |       const usdToRubRate = await getFxRateToRub('USD');
                                       ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:689:34)
(fail) AUM Data Processing with Various Currencies Tests > Integration Tests for AUM Data with Currencies > should handle complete workflow with USD AUM data and conversion [1.00ms]
767 |         ]
768 |       });
769 | 
770 |       // Test the complete workflow: fetch AUM data + convert to RUB
771 |       const aumResult = await buildAumMapSmart(['TRUR', 'TUSD', 'TEUR']);
772 |       const usdToRubRate = await getFxRateToRub('USD');
                                       ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:772:34)
(fail) AUM Data Processing with Various Currencies Tests > Integration Tests for AUM Data with Currencies > should handle mixed currency workflow with conversion [1.00ms]
811 |       const result = await buildAumMapSmart(['TRUR']);
812 | 
813 |       expect(result).toBeDefined();
814 |       expect(typeof result).toBe('object');
815 |       // Should return empty object on network error
816 |       expect(Object.keys(result)).toHaveLength(0);
                                        ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:816:35)
(fail) AUM Data Processing with Various Currencies Tests > Error Handling for AUM Data with Currencies > should handle network errors when fetching AUM data gracefully [1.00ms]
821 |       const { getFxRateToRub } = await import('../../tools/etfCap');
822 | 
823 |       // Mock the currencies method to reject with an unauthorized error
824 |       mockTinkoffSDK.instruments.currencies.mockRejectedValue(new Error('UNAUTHENTICATED: Network error'));
825 | 
826 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:826:26)
(fail) AUM Data Processing with Various Currencies Tests > Error Handling for AUM Data with Currencies > should handle unauthorized access errors when fetching currency rates
832 |       const { getFxRateToRub } = await import('../../tools/etfCap');
833 | 
834 |       // Mock the currencies method to reject with a rate limit error
835 |       mockTinkoffSDK.instruments.currencies.mockRejectedValue(new Error('RESOURCE_EXHAUSTED: Rate limit exceeded'));
836 | 
837 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:837:26)
(fail) AUM Data Processing with Various Currencies Tests > Error Handling for AUM Data with Currencies > should handle rate limiting errors when fetching currency rates
854 |       const result = await buildAumMapSmart(['TRUR']);
855 | 
856 |       expect(result).toBeDefined();
857 |       expect(typeof result).toBe('object');
858 |       // Should return empty object when unable to parse HTML
859 |       expect(Object.keys(result)).toHaveLength(0);
                                        ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:859:35)
(fail) AUM Data Processing with Various Currencies Tests > Error Handling for AUM Data with Currencies > should handle malformed HTML when parsing AUM data [1.00ms]
865 | 
866 |       // Save original TOKEN and set it to empty string
867 |       const originalToken = process.env.TOKEN;
868 |       process.env.TOKEN = '';
869 | 
870 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:870:26)
(fail) AUM Data Processing with Various Currencies Tests > Error Handling for AUM Data with Currencies > should handle empty environment variables
955 |           }
956 |         ]
957 |       });
958 | 
959 |       const promises = [
960 |         getFxRateToRub('RUB'),
              ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("RUB")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:960:9)
(fail) AUM Data Processing with Various Currencies Tests > Performance Tests for AUM Data with Currencies > should handle multiple concurrent currency conversion requests [4.00ms]
1021 |         ]
1022 |       });
1023 | 
1024 |       const startTime = performance.now();
1025 |       const aumResult = await buildAumMapSmart(['TRUR', 'TUSD']);
1026 |       const usdRate = await getFxRateToRub('USD');
                                   ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-aum-currencies.test.ts:1026:29)
(fail) AUM Data Processing with Various Currencies Tests > Performance Tests for AUM Data with Currencies > should complete AUM data processing with currency conversion within reasonable time [5.00ms]

src/__tests__/tools/pollEtfMetrics-collection.test.ts:
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:203:13)
(fail) PollEtfMetrics Metrics Collection Tests > Single Symbol Metrics Collection > should collect metrics for a single ETF symbol [4.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:269:13)
(fail) PollEtfMetrics Metrics Collection Tests > Single Symbol Metrics Collection > should handle missing shares count gracefully [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:336:13)
(fail) PollEtfMetrics Metrics Collection Tests > Single Symbol Metrics Collection > should collect metrics with AUM data [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:403:13)
(fail) PollEtfMetrics Metrics Collection Tests > Multiple Symbols Metrics Collection > should collect metrics for multiple ETF symbols [1.00ms]
471 |       });
472 | 
473 |       mockPath.join.mockImplementation((...args: string[]) => args.join('/'));
474 | 
475 |       // Test the metrics collection - should not throw even if one symbol fails
476 |       await expect(collectOnceForSymbols(['TRUR', 'TMOS'])).resolves.toBeUndefined();
                                                                           ^
error: 

Expected promise that resolves
Received promise that rejected: Promise { <rejected> }

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:476:70)
(fail) PollEtfMetrics Metrics Collection Tests > Multiple Symbols Metrics Collection > should handle partial failures in multi-symbol collection [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:540:13)
(fail) PollEtfMetrics Metrics Collection Tests > Shares Count Collection Methods > should collect shares count from Smartfeed API [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:600:13)
(fail) PollEtfMetrics Metrics Collection Tests > Shares Count Collection Methods > should fallback to local cache when Smartfeed API fails [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:699:13)
(fail) PollEtfMetrics Metrics Collection Tests > Metrics Data Structure and Content > should create metrics with all required fields [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:772:13)
(fail) PollEtfMetrics Metrics Collection Tests > Metrics Data Structure and Content > should calculate decorrelation percentage correctly [1.00ms]
818 |       });
819 | 
820 |       mockPath.join.mockImplementation((...args: string[]) => args.join('/'));
821 | 
822 |       // Test the metrics collection - should not throw
823 |       await expect(collectOnceForSymbols(['TRUR'])).resolves.toBeUndefined();
                                                                   ^
error: 

Expected promise that resolves
Received promise that rejected: Promise { <rejected> }

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:823:62)
(fail) PollEtfMetrics Metrics Collection Tests > Metrics Collection Error Handling > should handle network errors gracefully [1.00ms]
860 |       });
861 | 
862 |       mockPath.join.mockImplementation((...args: string[]) => args.join('/'));
863 | 
864 |       // Test the metrics collection - should not throw
865 |       await expect(collectOnceForSymbols(['TRUR'])).resolves.toBeUndefined();
                                                                   ^
error: 

Expected promise that resolves
Received promise that rejected: Promise { <rejected> }

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:865:62)
(fail) PollEtfMetrics Metrics Collection Tests > Metrics Collection Error Handling > should handle file system errors gracefully [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:883:13)
(fail) PollEtfMetrics Metrics Collection Tests > Metrics Collection Edge Cases > should handle empty symbols array
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:943:13)
(fail) PollEtfMetrics Metrics Collection Tests > Metrics Collection Edge Cases > should handle symbols with special characters [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-collection.test.ts:1008:13)
(fail) PollEtfMetrics Metrics Collection Tests > Performance Tests for Metrics Collection > should collect metrics for single symbol within reasonable time [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
(fail) PollEtfMetrics Metrics Collection Tests > Performance Tests for Metrics Collection > should handle concurrent metrics collection requests [1.00ms]

src/__tests__/tools/pollEtfMetrics.test.ts:
131 |       const exists = await fs.access(metricsPath).then(() => true).catch(() => false);
132 |       expect(exists).toBe(true);
133 | 
134 |       // Read and validate metrics content
135 |       const metricsContent = await fs.readFile(metricsPath, 'utf-8');
136 |       const metrics = JSON.parse(metricsContent);
                                 ^
SyntaxError: JSON Parse error: Unexpected EOF
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:136:28)
(fail) PollEtfMetrics Tool Tests > Metrics Collection > should collect metrics for single symbol [2.00ms]
160 |       expect(trurExists).toBe(true);
161 |       expect(tmosExists).toBe(true);
162 | 
163 |       // Validate TMOS metrics
164 |       const tmosContent = await fs.readFile(tmosPath, 'utf-8');
165 |       const tmosMetrics = JSON.parse(tmosContent);
                                     ^
SyntaxError: JSON Parse error: Unexpected EOF
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:165:32)
(fail) PollEtfMetrics Tool Tests > Metrics Collection > should collect metrics for multiple symbols [1.00ms]
191 |     it('should calculate decorrelation percentage correctly', async () => {
192 |       await mockCollectOnceForSymbols(['TRUR']);
193 | 
194 |       const metricsPath = path.join(testWorkspace, 'etf_metrics', 'TRUR.json');
195 |       const metricsContent = await fs.readFile(metricsPath, 'utf-8');
196 |       const metrics = JSON.parse(metricsContent);
                                 ^
SyntaxError: JSON Parse error: Unexpected EOF
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:196:28)
(fail) PollEtfMetrics Tool Tests > Metrics Collection > should calculate decorrelation percentage correctly [1.00ms]
204 |     it('should include all required fields in metrics', async () => {
205 |       await mockCollectOnceForSymbols(['TRUR']);
206 | 
207 |       const metricsPath = path.join(testWorkspace, 'etf_metrics', 'TRUR.json');
208 |       const metricsContent = await fs.readFile(metricsPath, 'utf-8');
209 |       const metrics = JSON.parse(metricsContent);
                                 ^
SyntaxError: JSON Parse error: Unexpected EOF
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:209:28)
(fail) PollEtfMetrics Tool Tests > Metrics Collection > should include all required fields in metrics [1.00ms]
249 |     it('should calculate market cap correctly', async () => {
250 |       await mockCollectOnceForSymbols(['TRUR']);
251 | 
252 |       const metricsPath = path.join(testWorkspace, 'etf_metrics', 'TRUR.json');
253 |       const metricsContent = await fs.readFile(metricsPath, 'utf-8');
254 |       const metrics = JSON.parse(metricsContent);
                                 ^
SyntaxError: JSON Parse error: Unexpected EOF
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:254:28)
(fail) PollEtfMetrics Tool Tests > Data Processing and Calculations > should calculate market cap correctly
315 |   });
316 | 
317 |   describe('File System Operations', () => {
318 |     it('should create etf_metrics directory if it does not exist', async () => {
319 |       // Remove directory first
320 |       await fs.rm(path.join(testWorkspace, 'etf_metrics'), { recursive: true, force: true });
                     ^
TypeError: fs.rm is not a function. (In 'fs.rm(path.join(testWorkspace, "etf_metrics"), { recursive: !0, force: !0 })', 'fs.rm' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:320:16)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics.test.ts:318:68)
(fail) PollEtfMetrics Tool Tests > File System Operations > should create etf_metrics directory if it does not exist [1.00ms]

src/__tests__/tools/enhanced-configManager.test.ts:
111 |       }
112 |     });
113 | 
114 |     it('should return undefined for non-existent account', () => {
115 |       const nonExistentAccount = configLoader.getAccountById('non-existent-id');
116 |       expect(nonExistentAccount).toBeUndefined();
                                       ^
error: expect(received).toBeUndefined()

Received: {
  id: "test-account-1",
  name: "Test Account 1",
  t_invest_token: "t.test_token_1",
  account_id: "123456789",
  desired_wallet: {
    TRUR: 30,
    TMOS: 40,
    TGLD: 30,
  },
  desired_mode: "manual",
  balance_interval: 300000,
  sleep_between_orders: 1000,
  margin_trading: {
    enabled: false,
  },
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/enhanced-configManager.test.ts:116:34)
(fail) ConfigManager Tool Tests > Configuration Loading and Validation > should return undefined for non-existent account [2.00ms]
236 |       }
237 |     });
238 | 
239 |     it('should handle missing account scenarios', () => {
240 |       const result = configLoader.getAccountById('definitely-does-not-exist');
241 |       expect(result).toBeUndefined();
                           ^
error: expect(received).toBeUndefined()

Received: {
  id: "test-account-1",
  name: "Test Account 1",
  t_invest_token: "t.test_token_1",
  account_id: "123456789",
  desired_wallet: {
    TRUR: 30,
    TMOS: 40,
    TGLD: 30,
  },
  desired_mode: "manual",
  balance_interval: 300000,
  sleep_between_orders: 1000,
  margin_trading: {
    enabled: false,
  },
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/enhanced-configManager.test.ts:241:22)
(fail) ConfigManager Tool Tests > Error Handling > should handle missing account scenarios [1.00ms]

src/__tests__/tools/pollEtfMetrics-historical.test.ts:
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:227:15)
(fail) PollEtfMetrics Historical Data Processing Tests > Time-Series Data Collection > should collect and store metrics over time for historical analysis [3.00ms]
330 |         await new Promise(resolve => setTimeout(resolve, 10));
331 |       }
332 | 
333 |       // Verify that we have fewer data points due to failures
334 |       expect(writtenMetricsHistory.TRUR.length).toBeLessThan(5);
335 |       expect(writtenMetricsHistory.TRUR.length).toBeGreaterThan(0);
                                                      ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:335:49)
(fail) PollEtfMetrics Historical Data Processing Tests > Time-Series Data Collection > should handle time-series data with missing intervals [68.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:420:15)
(fail) PollEtfMetrics Historical Data Processing Tests > Historical Data Analysis > should calculate trends from historical metrics data [3.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:527:15)
(fail) PollEtfMetrics Historical Data Processing Tests > Historical Data Analysis > should identify significant changes in historical data [3.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:646:13)
(fail) PollEtfMetrics Historical Data Processing Tests > Historical Metric Comparison > should compare current metrics with historical averages [3.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:747:15)
(fail) PollEtfMetrics Historical Data Processing Tests > Historical Metric Comparison > should detect anomalies in historical data patterns [2.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:865:15)
(fail) PollEtfMetrics Historical Data Processing Tests > Long-Term Data Storage and Validation > should validate historical data integrity over time [2.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:986:13)
(fail) PollEtfMetrics Historical Data Processing Tests > Long-Term Data Storage and Validation > should handle large historical datasets efficiently [3.00ms]
1077 |       });
1078 | 
1079 |       mockPath.join.mockImplementation((...args: string[]) => args.join('/'));
1080 | 
1081 |       // Collect metrics - should not throw even with corrupted historical data
1082 |       await expect(collectOnceForSymbols(['TRUR'])).resolves.toBeUndefined();
                                                                    ^
error: 

Expected promise that resolves
Received promise that rejected: Promise { <rejected> }

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:1082:62)
(fail) PollEtfMetrics Historical Data Processing Tests > Historical Data Edge Cases > should handle corrupted historical data gracefully [2.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-historical.test.ts:1191:13)
(fail) PollEtfMetrics Historical Data Processing Tests > Historical Data Edge Cases > should handle historical data with special characters [1.00ms]

src/__tests__/tools/configManager-export.test.ts:
728 |       });
729 | 
730 |       // Test handling of file system error
731 |       await expect(async () => {
732 |         await mockConfigLoader.exportConfig('/test/export.json', 'json');
733 |       }).rejects.toThrow(/Failed to export configuration to/);
                       ^
error: 

Expected promise
Received: [AsyncFunction]

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-export.test.ts:733:18)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-export.test.ts:713:58)
(fail) ConfigManager Configuration Export Tests > Configuration Export Error Handling > should handle file system errors during export [1.00ms]

src/__tests__/tools/configManager-validation.test.ts:
121 |       const logSpy = mock((...args: any[]) => {});
122 |       const originalLog = console.log;
123 |       console.log = logSpy;
124 | 
125 |       try {
126 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:126:9)
(fail) ConfigManager Configuration Validation Tests > Configuration Structure Validation > should validate correct configuration structure [8.00ms]
180 |       const originalError = console.error;
181 |       console.log = logSpy;
182 |       console.error = errorSpy;
183 | 
184 |       try {
185 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:185:9)
(fail) ConfigManager Configuration Validation Tests > Configuration Structure Validation > should detect duplicate account IDs [2.00ms]
238 |       const logSpy = mock((...args: any[]) => {});
239 |       const originalLog = console.log;
240 |       console.log = logSpy;
241 | 
242 |       try {
243 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:243:9)
(fail) ConfigManager Configuration Validation Tests > Configuration Structure Validation > should detect duplicate tokens [1.00ms]
293 |       const logSpy = mock((...args: any[]) => {});
294 |       const originalLog = console.log;
295 |       console.log = logSpy;
296 | 
297 |       try {
298 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:298:9)
(fail) ConfigManager Configuration Validation Tests > Token Validation > should validate environment variable tokens [3.00ms]
347 |       const originalError = console.error;
348 |       console.log = logSpy;
349 |       console.error = errorSpy;
350 | 
351 |       try {
352 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:352:9)
(fail) ConfigManager Configuration Validation Tests > Token Validation > should detect missing environment variables [3.00ms]
398 |       const logSpy = mock((...args: any[]) => {});
399 |       const originalLog = console.log;
400 |       console.log = logSpy;
401 | 
402 |       try {
403 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:403:9)
(fail) ConfigManager Configuration Validation Tests > Account Configuration Validation > should validate account with correct weight distribution [2.00ms]
444 |       const logSpy = mock((...args: any[]) => {});
445 |       const originalLog = console.log;
446 |       console.log = logSpy;
447 | 
448 |       try {
449 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:449:9)
(fail) ConfigManager Configuration Validation Tests > Account Configuration Validation > should detect incorrect weight distribution [1.00ms]
494 |       const logSpy = mock((...args: any[]) => {});
495 |       const originalLog = console.log;
496 |       console.log = logSpy;
497 | 
498 |       try {
499 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:499:9)
(fail) ConfigManager Configuration Validation Tests > Margin Trading Configuration Validation > should validate account with correct margin trading configuration [1.00ms]
542 |       const logSpy = mock((...args: any[]) => {});
543 |       const originalLog = console.log;
544 |       console.log = logSpy;
545 | 
546 |       try {
547 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:547:9)
(fail) ConfigManager Configuration Validation Tests > Margin Trading Configuration Validation > should validate margin trading with different strategies [2.00ms]
580 |         validateConfig();
581 |         // Should not reach here as process.exit should be called
582 |         expect(true).toBe(false);
583 |       } catch (error) {
584 |         // Verify that error was logged
585 |         expect(errorSpy).toHaveBeenCalledWith('❌ Validation error: Configuration file not found');
                               ^
error: expect(received).toHaveBeenCalledWith(...expected)

Expected: [ "❌ Validation error: Configuration file not found" ]
But it was not called.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:585:26)
(fail) ConfigManager Configuration Validation Tests > Error Handling in Validation > should handle configuration loading errors gracefully [2.00ms]
608 |         validateConfig();
609 |         // Should not reach here as process.exit should be called
610 |         expect(true).toBe(false);
611 |       } catch (error) {
612 |         // Verify that error was logged
613 |         expect(errorSpy).toHaveBeenCalledWith('❌ Validation error: Unknown error');
                               ^
error: expect(received).toHaveBeenCalledWith(...expected)

Expected: [ "❌ Validation error: Unknown error" ]
But it was not called.
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:613:26)
(fail) ConfigManager Configuration Validation Tests > Error Handling in Validation > should handle unknown errors gracefully [1.00ms]
635 |       const logSpy = mock((...args: any[]) => {});
636 |       const originalLog = console.log;
637 |       console.log = logSpy;
638 | 
639 |       try {
640 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:640:9)
(fail) ConfigManager Configuration Validation Tests > Configuration Validation Edge Cases > should handle empty configuration [1.00ms]
680 |       const logSpy = mock((...args: any[]) => {});
681 |       const originalLog = console.log;
682 |       console.log = logSpy;
683 | 
684 |       try {
685 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:685:9)
(fail) ConfigManager Configuration Validation Tests > Configuration Validation Edge Cases > should handle configuration with special characters in account names [1.00ms]
726 |       const logSpy = mock((...args: any[]) => {});
727 |       const originalLog = console.log;
728 |       console.log = logSpy;
729 | 
730 |       try {
731 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:731:9)
(fail) ConfigManager Configuration Validation Tests > Configuration Validation Edge Cases > should handle malformed environment variable syntax [1.00ms]
776 |       const originalLog = console.log;
777 |       console.log = logSpy;
778 | 
779 |       try {
780 |         const startTime = performance.now();
781 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:781:9)
(fail) ConfigManager Configuration Validation Tests > Performance Tests for Configuration Validation > should handle large configuration with many accounts [2.00ms]
849 |       const originalLog = console.log;
850 |       console.log = logSpy;
851 | 
852 |       try {
853 |         const startTime = performance.now();
854 |         validateConfig();
              ^
TypeError: validateConfig is not a function. (In 'validateConfig()', 'validateConfig' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-validation.test.ts:854:9)
(fail) ConfigManager Configuration Validation Tests > Performance Tests for Configuration Validation > should validate configuration efficiently [2.00ms]

src/__tests__/tools/analyzeNews.test.ts:
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Path and Directory Handling > should generate correct news directory path [5.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Path and Directory Handling > should generate correct meta directory path [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Path and Directory Handling > should handle different symbols correctly [2.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Path and Directory Handling > should handle special characters in symbols
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File System Operations > should list news markdown files correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File System Operations > should handle empty news directory [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File System Operations > should handle non-existent news directory gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File System Operations > should extract ID from filename correctly
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File System Operations > should check file existence correctly
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Prompt Building > should build correct prompt for news analysis
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Prompt Building > should handle empty content in prompt building [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Prompt Building > should handle special characters in content
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > OpenRouter Configuration > should get OpenRouter configuration correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > OpenRouter Configuration > should use default values when env vars are not set [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > OpenRouter API Calls > should make correct API call to OpenRouter
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > OpenRouter API Calls > should handle missing API key gracefully [2.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > OpenRouter API Calls > should handle API errors gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > JSON Extraction > should extract JSON from model response correctly [2.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > JSON Extraction > should handle invalid JSON gracefully [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > JSON Extraction > should handle malformed JSON gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File Analysis > should analyze news file correctly [2.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File Analysis > should skip existing analyzed files [2.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > File Analysis > should handle API errors during analysis gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Symbol Analysis > should analyze news for symbol correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Symbol Analysis > should handle no news files gracefully [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Symbol Analysis > should filter by specific ID correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Symbol Analysis > should apply limit correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Error Handling and Edge Cases > should handle file system errors gracefully [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Error Handling and Edge Cases > should handle file read errors gracefully [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Error Handling and Edge Cases > should handle empty environment variables gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Error Handling and Edge Cases > should handle network timeouts gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) AnalyzeNews Tool Tests > Performance and Concurrency > should handle concurrent analysis requests [1.00ms]

src/__tests__/tools/configManager-updates.test.ts:
523 |         let isValid = false;
524 |         if (testCase.wallet && typeof testCase.wallet === 'object' && Object.keys(testCase.wallet).length > 0) {
525 |           const total = Object.values(testCase.wallet).reduce((sum, val) => sum + val, 0);
526 |           isValid = Math.abs(total - 100) <= 1; // Allow 1% tolerance
527 |         }
528 |         expect(isValid).toBe(testCase.expected);
                              ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:528:25)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:522:19)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:509:71)
(fail) ConfigManager Configuration Updates Tests > Configuration Update Validation > should validate desired wallet configuration during updates [1.00ms]
560 |       });
561 | 
562 |       // Test handling of file system error
563 |       await expect(async () => {
564 |         await mockConfigLoader.saveConfig();
565 |       }).rejects.toThrow('Failed to save configuration: Permission denied');
                       ^
error: 

Expected promise
Received: [AsyncFunction]

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:565:18)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:534:59)
(fail) ConfigManager Configuration Updates Tests > Configuration Update Error Handling > should handle file system errors during updates [1.00ms]
595 |       });
596 | 
597 |       // Test handling of JSON serialization error
598 |       await expect(async () => {
599 |         await mockConfigLoader.saveConfig();
600 |       }).rejects.toThrow(/Failed to serialize configuration/);
                       ^
error: 

Expected promise
Received: [AsyncFunction]

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:600:18)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:571:66)
(fail) ConfigManager Configuration Updates Tests > Configuration Update Error Handling > should handle JSON serialization errors during updates [1.00ms]
670 |       });
671 | 
672 |       // Test adding account with extremely large numbers
673 |       expect(() => {
674 |         mockConfigLoader.addAccount(accountWithLargeNumbers);
675 |       }).toThrow(); // Should throw validation error
               ^
error: expect(received).toThrow()

Received function did not throw
Received value: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:675:10)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/configManager-updates.test.ts:638:62)
(fail) ConfigManager Configuration Updates Tests > Configuration Update Edge Cases > should handle updates with extremely large numbers [2.00ms]

src/__tests__/tools/etfCap-market-cap.test.ts:
298 | 
299 |       const result = await getEtfMarketCapRUB('TRUR');
300 | 
301 |       expect(result).toBeDefined();
302 |       expect(result).not.toBeNull();
303 |       expect(result!.type).toBe('ETF');
                                 ^
error: expect(received).toBe(expected)

Expected: "ETF"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:303:28)
(fail) ETF Market Capitalization Calculation Tests > ETF Market Capitalization Calculation > should calculate market cap for standard ETF [2.00ms]
334 |       });
335 | 
336 |       const result = await getEtfMarketCapRUB('TRUR');
337 | 
338 |       expect(result).toBeDefined();
339 |       expect(result!.numShares).toBe(10000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 10000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:339:33)
(fail) ETF Market Capitalization Calculation Tests > ETF Market Capitalization Calculation > should handle ETF with missing numShares from list [1.00ms]
371 |       });
372 | 
373 |       const result = await getEtfMarketCapRUB('TRUR');
374 | 
375 |       expect(result).toBeDefined();
376 |       expect(result!.numShares).toBe(5000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 5000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:376:33)
(fail) ETF Market Capitalization Calculation Tests > ETF Market Capitalization Calculation > should fallback to asset API when etfBy fails [1.00ms]
417 |       });
418 | 
419 |       const result = await getEtfMarketCapRUB('TRUR');
420 | 
421 |       expect(result).toBeDefined();
422 |       expect(result!.numShares).toBe(0);
                                      ^
error: expect(received).toBe(expected)

Expected: 0
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:422:33)
(fail) ETF Market Capitalization Calculation Tests > ETF Market Capitalization Calculation > should handle ETF with zero shares [1.00ms]
440 |       });
441 | 
442 |       const result = await getEtfMarketCapRUB('TRUR');
443 | 
444 |       expect(result).toBeDefined();
445 |       expect(result!.numShares).toBe(1000000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 1000000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:445:33)
(fail) ETF Market Capitalization Calculation Tests > ETF Market Capitalization Calculation > should handle ETF with extremely large number of shares
450 |   describe('Share Market Capitalization Calculation', () => {
451 |     it('should calculate market cap for standard share', async () => {
452 |       // Import the function inside the test
453 |       const { getShareMarketCapRUB } = await import('../../tools/etfCap');
454 | 
455 |       const result = await getShareMarketCapRUB('SBER');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:455:28)
(fail) ETF Market Capitalization Calculation Tests > Share Market Capitalization Calculation > should calculate market cap for standard share [3.00ms]
490 |             }
491 |           }
492 |         }
493 |       });
494 | 
495 |       const result = await getShareMarketCapRUB('SBER');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:495:28)
(fail) ETF Market Capitalization Calculation Tests > Share Market Capitalization Calculation > should handle share with missing issueSize from list [1.00ms]
500 | 
501 |     it('should handle non-existent share', async () => {
502 |       // Import the function inside the test
503 |       const { getShareMarketCapRUB } = await import('../../tools/etfCap');
504 | 
505 |       const result = await getShareMarketCapRUB('NONEXISTENT');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("NONEXISTENT")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:505:28)
(fail) ETF Market Capitalization Calculation Tests > Share Market Capitalization Calculation > should handle non-existent share [1.00ms]
521 |             assetUid: 'asset-sber-uid'
522 |           }
523 |         ]
524 |       });
525 | 
526 |       const result = await getShareMarketCapRUB('SBER');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:526:28)
(fail) ETF Market Capitalization Calculation Tests > Share Market Capitalization Calculation > should handle share with zero issue size [2.00ms]
583 |       });
584 | 
585 |       const result = await getEtfMarketCapRUB('TRUR');
586 | 
587 |       expect(result).toBeDefined();
588 |       expect(result!.lastPriceRUB).toBe(10000);
                                         ^
error: expect(received).toBe(expected)

Expected: 10000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:588:36)
(fail) ETF Market Capitalization Calculation Tests > Market Cap Calculation Edge Cases > should handle ETF with extremely high price [2.00ms]
607 | 
608 |       const result = await getEtfMarketCapRUB('TRUR');
609 | 
610 |       expect(result).toBeDefined();
611 |       // The numShares should be properly converted from TinkoffNumber format
612 |       expect(result!.numShares).toBe(15000000.5);
                                      ^
error: expect(received).toBe(expected)

Expected: 15000000.5
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:612:33)
(fail) ETF Market Capitalization Calculation Tests > Market Cap Calculation Edge Cases > should handle ETF with fractional shares [2.00ms]
621 | 
622 |       // Mock the etfs method to reject with an unauthorized error
623 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('UNAUTHENTICATED: Network error'));
624 | 
625 |       const result = await getEtfMarketCapRUB('TRUR');
626 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:626:22)
(fail) ETF Market Capitalization Calculation Tests > API Error Handling for Market Cap Calculation > should handle unauthorized access errors [2.00ms]
632 | 
633 |       // Mock the etfs method to reject with a rate limit error
634 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('RESOURCE_EXHAUSTED: Rate limit exceeded'));
635 | 
636 |       const result = await getEtfMarketCapRUB('TRUR');
637 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:637:22)
(fail) ETF Market Capitalization Calculation Tests > API Error Handling for Market Cap Calculation > should handle rate limiting errors
643 | 
644 |       // Mock the etfs method to reject with a timeout error
645 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('DEADLINE_EXCEEDED: Request timed out'));
646 | 
647 |       const result = await getEtfMarketCapRUB('TRUR');
648 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:648:22)
(fail) ETF Market Capitalization Calculation Tests > API Error Handling for Market Cap Calculation > should handle network timeout errors
656 |         // Missing instruments field
657 |         invalidResponse: true
658 |       });
659 | 
660 |       const result = await getEtfMarketCapRUB('TRUR');
661 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:661:22)
(fail) ETF Market Capitalization Calculation Tests > API Error Handling for Market Cap Calculation > should handle malformed API responses [1.00ms]
668 |       // Save original TOKEN and set it to empty string
669 |       const originalToken = process.env.TOKEN;
670 |       process.env.TOKEN = '';
671 | 
672 |       const result = await getEtfMarketCapRUB('TRUR');
673 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:673:22)
(fail) ETF Market Capitalization Calculation Tests > API Error Handling for Market Cap Calculation > should handle empty environment variables [1.00ms]
691 |       const results = await Promise.all(promises);
692 | 
693 |       expect(results).toHaveLength(3);
694 |       results.forEach(result => {
695 |         expect(result).toBeDefined();
696 |         expect(result).not.toBeNull();
                                 ^
error: expect(received).not.toBeNull()

Received: null

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:696:28)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:694:15)
(fail) ETF Market Capitalization Calculation Tests > Performance Tests for Market Cap Calculation > should handle multiple concurrent ETF requests [1.00ms]
704 |       // Import the functions inside the test
705 |       const { getEtfMarketCapRUB, getShareMarketCapRUB } = await import('../../tools/etfCap');
706 | 
707 |       const promises = [
708 |         getEtfMarketCapRUB('TRUR'),
709 |         getShareMarketCapRUB('SBER')
              ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:709:9)
(fail) ETF Market Capitalization Calculation Tests > Performance Tests for Market Cap Calculation > should handle mixed ETF and share requests
741 |       // Import the functions inside the test
742 |       const { getEtfMarketCapRUB, getShareMarketCapRUB } = await import('../../tools/etfCap');
743 | 
744 |       // Test the complete workflow: fetch ETF data + share data
745 |       const etfResult = await getEtfMarketCapRUB('TRUR');
746 |       const shareResult = await getShareMarketCapRUB('SBER');
                                      ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:746:33)
(fail) ETF Market Capitalization Calculation Tests > Integration Tests for Market Cap Calculation > should handle complete workflow with valid data [1.00ms]
764 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('API Error'));
765 |       mockTinkoffSDK.instruments.etfBy.mockRejectedValue(new Error('API Error'));
766 |       mockTinkoffSDK.instruments.getAssetBy.mockRejectedValue(new Error('API Error'));
767 | 
768 |       const result = await getEtfMarketCapRUB('TRUR');
769 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:769:22)
(fail) ETF Market Capitalization Calculation Tests > Integration Tests for Market Cap Calculation > should handle workflow with missing data sources
799 |       });
800 | 
801 |       const result = await getEtfMarketCapRUB('TRUR');
802 | 
803 |       expect(result).toBeDefined();
804 |       expect(result!.numShares).toBe(5000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 5000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-market-cap.test.ts:804:33)
(fail) ETF Market Capitalization Calculation Tests > Integration Tests for Market Cap Calculation > should handle workflow with partial data sources [2.00ms]

src/__tests__/tools/etfCap.test.ts:
313 |         Object.values(result).forEach(aumEntry => {
314 |           expect(aumEntry).toHaveProperty('amount');
315 |           expect(aumEntry).toHaveProperty('currency');
316 |           expect(typeof aumEntry.amount).toBe('number');
317 |           expect(['RUB', 'USD', 'EUR']).toContain(aumEntry.currency);
318 |           expect(aumEntry.amount).toBeGreaterThan(0);
                                        ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:318:35)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:313:31)
(fail) EtfCap Tool Tests > AUM Data Fetching > should fetch AUM data from T-Capital website [1.00ms]
373 |   describe('FX Rate Fetching', () => {
374 |     it('should return 1 for RUB currency', async () => {
375 |       // Import the function inside the test
376 |       const { getFxRateToRub } = await import('../../tools/etfCap');
377 | 
378 |       const rate = await getFxRateToRub('RUB');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("RUB")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:378:26)
(fail) EtfCap Tool Tests > FX Rate Fetching > should return 1 for RUB currency
381 | 
382 |     it('should fetch USD to RUB rate', async () => {
383 |       // Import the function inside the test
384 |       const { getFxRateToRub } = await import('../../tools/etfCap');
385 | 
386 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:386:26)
(fail) EtfCap Tool Tests > FX Rate Fetching > should fetch USD to RUB rate
396 | 
397 |     it('should fetch EUR to RUB rate', async () => {
398 |       // Import the function inside the test
399 |       const { getFxRateToRub } = await import('../../tools/etfCap');
400 | 
401 |       const rate = await getFxRateToRub('EUR');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("EUR")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:401:26)
(fail) EtfCap Tool Tests > FX Rate Fetching > should fetch EUR to RUB rate [1.00ms]
414 |       const { getFxRateToRub } = await import('../../tools/etfCap');
415 | 
416 |       // Mock the currencies method to reject with an error
417 |       mockTinkoffSDK.instruments.currencies.mockRejectedValue(new Error('UNAUTHENTICATED: Unauthorized'));
418 | 
419 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:419:26)
(fail) EtfCap Tool Tests > FX Rate Fetching > should handle API errors gracefully [1.00ms]
426 | 
427 |       mockTinkoffSDK.instruments.currencies.mockResolvedValue({
428 |         instruments: [] // No currencies
429 |       });
430 | 
431 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:431:26)
(fail) EtfCap Tool Tests > FX Rate Fetching > should handle missing currency instruments
443 |             price: undefined // Invalid price
444 |           }
445 |         ]
446 |       });
447 | 
448 |       const rate = await getFxRateToRub('USD');
                               ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:448:26)
(fail) EtfCap Tool Tests > FX Rate Fetching > should handle invalid price data [1.00ms]
456 |       const { getEtfMarketCapRUB } = await import('../../tools/etfCap');
457 | 
458 |       const result = await getEtfMarketCapRUB('TRUR');
459 | 
460 |       expect(result).toBeDefined();
461 |       expect(result!.type).toBe('ETF');
                                 ^
error: expect(received).toBe(expected)

Expected: "ETF"
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:461:28)
(fail) EtfCap Tool Tests > ETF Market Cap Calculation > should calculate ETF market cap correctly [1.00ms]
501 |       });
502 | 
503 |       const result = await getEtfMarketCapRUB('TRUR');
504 | 
505 |       expect(result).toBeDefined();
506 |       expect(result!.numShares).toBe(10000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 10000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:506:33)
(fail) EtfCap Tool Tests > ETF Market Cap Calculation > should handle ETF with missing numShares [1.00ms]
537 |       });
538 | 
539 |       const result = await getEtfMarketCapRUB('TRUR');
540 | 
541 |       expect(result).toBeDefined();
542 |       expect(result!.numShares).toBe(5000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 5000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:542:33)
(fail) EtfCap Tool Tests > ETF Market Cap Calculation > should fallback to asset API for numShares [1.00ms]
549 | 
550 |       // Mock the etfs method to reject with an error
551 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('UNAUTHENTICATED: Network error'));
552 | 
553 |       const result = await getEtfMarketCapRUB('TRUR');
554 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:554:22)
(fail) EtfCap Tool Tests > ETF Market Cap Calculation > should handle API errors gracefully [1.00ms]
571 |   describe('Share Market Cap Calculation', () => {
572 |     it('should calculate share market cap correctly', async () => {
573 |       // Import the function inside the test
574 |       const { getShareMarketCapRUB } = await import('../../tools/etfCap');
575 | 
576 |       const result = await getShareMarketCapRUB('SBER');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:576:28)
(fail) EtfCap Tool Tests > Share Market Cap Calculation > should calculate share market cap correctly [1.00ms]
589 | 
590 |     it('should handle non-existent share', async () => {
591 |       // Import the function inside the test
592 |       const { getShareMarketCapRUB } = await import('../../tools/etfCap');
593 | 
594 |       const result = await getShareMarketCapRUB('NONEXISTENT');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("NONEXISTENT")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:594:28)
(fail) EtfCap Tool Tests > Share Market Cap Calculation > should handle non-existent share [2.00ms]
620 |             }
621 |           }
622 |         }
623 |       });
624 | 
625 |       const result = await getShareMarketCapRUB('SBER');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:625:28)
(fail) EtfCap Tool Tests > Share Market Cap Calculation > should handle share with missing issueSize
633 |       const { getShareMarketCapRUB } = await import('../../tools/etfCap');
634 | 
635 |       // Mock the shares method to reject with an error
636 |       mockTinkoffSDK.instruments.shares.mockRejectedValue(new Error('UNAUTHENTICATED: Network error'));
637 | 
638 |       const result = await getShareMarketCapRUB('SBER');
                                 ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:638:28)
(fail) EtfCap Tool Tests > Share Market Cap Calculation > should handle API errors gracefully [2.00ms]
705 |     it('should handle mixed ETF and share requests', async () => {
706 |       // Import the functions inside the test
707 |       const { getEtfMarketCapRUB, getShareMarketCapRUB } = await import('../../tools/etfCap');
708 | 
709 |       const etfResult = await getEtfMarketCapRUB('TRUR');
710 |       const shareResult = await getShareMarketCapRUB('SBER');
                                      ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:710:33)
(fail) EtfCap Tool Tests > Integration Tests > should handle mixed ETF and share requests [1.00ms]
722 | 
723 |     it('should handle currency conversion workflow', async () => {
724 |       // Import the function inside the test
725 |       const { getFxRateToRub } = await import('../../tools/etfCap');
726 | 
727 |       const usdRate = await getFxRateToRub('USD');
                                  ^
TypeError: getFxRateToRub is not a function. (In 'getFxRateToRub("USD")', 'getFxRateToRub' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:727:29)
(fail) EtfCap Tool Tests > Integration Tests > should handle currency conversion workflow [1.00ms]
742 |       // Save original TOKEN and set it to empty string
743 |       const originalToken = process.env.TOKEN;
744 |       process.env.TOKEN = '';
745 | 
746 |       const result = await getEtfMarketCapRUB('TRUR');
747 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:747:22)
(fail) EtfCap Tool Tests > Error Handling and Edge Cases > should handle empty environment variables [1.00ms]
758 |         // Missing instruments field
759 |         invalidResponse: true
760 |       });
761 | 
762 |       const result = await getEtfMarketCapRUB('TRUR');
763 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:763:22)
(fail) EtfCap Tool Tests > Error Handling and Edge Cases > should handle malformed API responses
769 | 
770 |       // Mock the etfs method to reject with a rate limit error
771 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('RESOURCE_EXHAUSTED: Rate limit exceeded'));
772 | 
773 |       const result = await getEtfMarketCapRUB('TRUR');
774 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:774:22)
(fail) EtfCap Tool Tests > Error Handling and Edge Cases > should handle rate limiting [2.00ms]
780 | 
781 |       // Mock the etfs method to reject with a timeout error
782 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('DEADLINE_EXCEEDED: Request timed out'));
783 | 
784 |       const result = await getEtfMarketCapRUB('TRUR');
785 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  marketCapRUB: 2000000000,
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:785:22)
(fail) EtfCap Tool Tests > Error Handling and Edge Cases > should handle network timeouts
792 |       const { getEtfMarketCapRUB, getShareMarketCapRUB } = await import('../../tools/etfCap');
793 | 
794 |       const promises = [
795 |         getEtfMarketCapRUB('TRUR'),
796 |         getEtfMarketCapRUB('TMOS'),
797 |         getShareMarketCapRUB('SBER')
              ^
TypeError: getShareMarketCapRUB is not a function. (In 'getShareMarketCapRUB("SBER")', 'getShareMarketCapRUB' is undefined)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap.test.ts:797:9)
(fail) EtfCap Tool Tests > Performance Tests > should handle multiple concurrent requests

src/__tests__/tools/analyzeNews-sentiment.test.ts:
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Analysis in Content Processing > should handle positive sentiment in news content
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Analysis in Content Processing > should handle negative sentiment in news content [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Analysis in Content Processing > should handle neutral sentiment in news content [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment-Related Category Classification > should correctly classify rebalancing sentiment
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment-Related Category Classification > should correctly classify dividend sentiment [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment-Related Category Classification > should correctly classify share redemption sentiment [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing with Financial Numbers > should extract and process positive financial sentiment [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing with Financial Numbers > should extract and process negative financial sentiment
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing with Trade Information > should process buy sentiment with trade details
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing with Trade Information > should process sell sentiment with trade details [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Edge Cases > should handle mixed sentiment in news content [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Edge Cases > should handle ambiguous sentiment in news content
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Error Handling > should handle sentiment analysis API errors gracefully [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Error Handling > should handle malformed sentiment analysis responses [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Error Handling > should handle empty sentiment analysis responses
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Performance > should handle concurrent sentiment analysis requests [1.00ms]
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/dotenv/lib/main.js'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at requestImportModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
(fail) AnalyzeNews Sentiment Processing Tests > Sentiment Processing Performance > should handle large sentiment analysis responses efficiently [1.00ms]

src/__tests__/tools/scrapeTbankNews.test.ts:
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > URL Generation and Path Handling > should generate correct base URL for symbol [4.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > URL Generation and Path Handling > should generate correct news directory path [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > URL Generation and Path Handling > should handle different symbols correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > URL Generation and Path Handling > should handle special characters in symbols
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News ID Parsing > should correctly parse news IDs from URLs
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News ID Parsing > should handle edge cases in news ID parsing [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > File System Operations > should create news directory when saving news [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > File System Operations > should read existing news IDs correctly
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > File System Operations > should handle empty news directory [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > File System Operations > should handle non-existent news directory gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > File System Operations > should filter out non-markdown files when reading news IDs [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Content Extraction > should extract article content correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Content Extraction > should handle missing title gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Content Extraction > should handle missing date gracefully [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Content Extraction > should handle missing body content gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Markdown Generation > should generate correct markdown format [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Markdown Generation > should handle missing title in markdown generation [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Markdown Generation > should handle missing date in markdown generation [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Markdown Generation > should handle empty body in markdown generation
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Link Collection > should collect all news links correctly [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Link Collection > should deduplicate collected news links [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Link Collection > should handle empty link collection
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Show More Button Handling > should handle pages without show more buttons [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Show More Button Handling > should handle disabled show more buttons [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Scraping Process > should open and scrape news correctly
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Scraping Process > should handle invalid news URLs gracefully [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > News Scraping Process > should handle page navigation errors gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Error Handling and Edge Cases > should handle file system errors gracefully when creating directories
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Error Handling and Edge Cases > should handle file system errors gracefully when writing files [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Error Handling and Edge Cases > should handle Puppeteer launch errors gracefully
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Error Handling and Edge Cases > should handle empty command line arguments [1.00ms]
1 | (function (entry, fetcher)
              ^
SyntaxError: Missing 'default' export in module '/tmp/gh-issue-solver-1758074196784/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js'.
      at requestImportModule (1:11)
      at linkAndEvaluateModule (1:11)
      at requestImportModule (2:1)
      at processTicksAndRejections (7:39)
(fail) ScrapeTbankNews Tool Tests > Performance and Concurrency > should handle concurrent news scraping requests

src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:326:13)
(fail) PollEtfMetrics Data Aggregation Tests > Cross-Symbol Data Aggregation > should aggregate metrics across multiple ETF symbols [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:424:13)
(fail) PollEtfMetrics Data Aggregation Tests > Cross-Symbol Data Aggregation > should calculate portfolio-level metrics from individual ETF metrics [2.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:546:13)
(fail) PollEtfMetrics Data Aggregation Tests > Time-Series Data Aggregation > should aggregate metrics over time for trend analysis [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:635:15)
(fail) PollEtfMetrics Data Aggregation Tests > Time-Series Data Aggregation > should calculate moving averages for metrics [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:744:13)
(fail) PollEtfMetrics Data Aggregation Tests > Cross-Metric Data Aggregation > should correlate different metrics (shares count, price, AUM) [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:921:13)
(fail) PollEtfMetrics Data Aggregation Tests > Aggregation Error Handling > should handle missing data gracefully during aggregation [1.00ms]
1016 |       });
1017 | 
1018 |       mockPath.join.mockImplementation((...args: string[]) => args.join('/'));
1019 | 
1020 |       // Test the metrics collection - should not throw even if one symbol fails
1021 |       await expect(collectOnceForSymbols(['TRUR', 'TMOS'])).resolves.toBeUndefined();
                                                                            ^
error: 

Expected promise that resolves
Received promise that rejected: Promise { <rejected> }

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:1021:70)
(fail) PollEtfMetrics Data Aggregation Tests > Aggregation Error Handling > should continue aggregation when individual symbol collection fails [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:1102:13)
(fail) PollEtfMetrics Data Aggregation Tests > Aggregation Performance > should efficiently aggregate data from many symbols [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:1193:13)
(fail) PollEtfMetrics Data Aggregation Tests > Aggregation Performance > should handle large numeric values in aggregation [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:1281:13)
(fail) PollEtfMetrics Data Aggregation Tests > Aggregation Edge Cases > should handle symbols with special characters in aggregation [1.00ms]
247 | };
248 | 
249 | export async function collectOnceForSymbols(symbols: string[]): Promise<void> {
250 |   const normalized = symbols.map((t) => normalizeTicker(t) || t);
251 |   const aumMap = await buildAumMapSmart(normalized);
252 |   const usdToRub = await getFxRateToRub('USD');
                               ^
ReferenceError: Cannot access 'getFxRateToRub' before initialization.
      at collectOnceForSymbols (/tmp/gh-issue-solver-1758074196784/src/tools/pollEtfMetrics.ts:252:26)
      at async <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/pollEtfMetrics-aggregation.test.ts:1391:13)
(fail) PollEtfMetrics Data Aggregation Tests > Aggregation Edge Cases > should aggregate data with mixed data sources [1.00ms]

src/__tests__/tools/etfCap-weight-distribution.test.ts:
277 |       });
278 | 
279 |       const result = await getEtfMarketCapRUB('TLARGE');
280 | 
281 |       expect(result).toBeDefined();
282 |       expect(result!.numShares).toBe(1000000000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 1000000000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:282:33)
(fail) Weight Distribution Edge Cases Tests > Market Cap Weight Distribution Edge Cases > should handle extremely large market cap values [1.00ms]
311 |       });
312 | 
313 |       const result = await getEtfMarketCapRUB('TSMALL');
314 | 
315 |       expect(result).toBeDefined();
316 |       expect(result!.numShares).toBe(1);
                                      ^
error: expect(received).toBe(expected)

Expected: 1
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:316:33)
(fail) Weight Distribution Edge Cases Tests > Market Cap Weight Distribution Edge Cases > should handle extremely small market cap values [1.00ms]
336 |       });
337 | 
338 |       const result = await getEtfMarketCapRUB('TZERO');
339 | 
340 |       expect(result).toBeDefined();
341 |       expect(result!.numShares).toBe(0);
                                      ^
error: expect(received).toBe(expected)

Expected: 0
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:341:33)
(fail) Weight Distribution Edge Cases Tests > Market Cap Weight Distribution Edge Cases > should handle zero market cap values
360 |       });
361 | 
362 |       const result = await getEtfMarketCapRUB('TFRACT');
363 | 
364 |       expect(result).toBeDefined();
365 |       expect(result!.numShares).toBe(1000000.5);
                                      ^
error: expect(received).toBe(expected)

Expected: 1000000.5
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:365:33)
(fail) Weight Distribution Edge Cases Tests > Market Cap Weight Distribution Edge Cases > should handle fractional shares in market cap calculation
394 |       `);
395 | 
396 |       const result = await buildAumMapSmart(['TLARGE']);
397 | 
398 |       expect(result).toBeDefined();
399 |       expect(result.TLARGE).toBeDefined();
                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:399:29)
(fail) Weight Distribution Edge Cases Tests > AUM Weight Distribution Edge Cases > should handle extremely large AUM values [1.00ms]
426 |       `);
427 | 
428 |       const result = await buildAumMapSmart(['TSMALL']);
429 | 
430 |       expect(result).toBeDefined();
431 |       expect(result.TSMALL).toBeDefined();
                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:431:29)
(fail) Weight Distribution Edge Cases Tests > AUM Weight Distribution Edge Cases > should handle extremely small AUM values [1.00ms]
524 |       });
525 | 
526 |       const result = await getEtfMarketCapRUB('TEQUAL');
527 | 
528 |       expect(result).toBeDefined();
529 |       expect(result!.marketCapRUB).toBe(100000000); // 1M * 100
                                         ^
error: expect(received).toBe(expected)

Expected: 100000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:529:36)
(fail) Weight Distribution Edge Cases Tests > Decorrelation Weight Distribution Edge Cases > should handle equal market cap and AUM values
560 |       });
561 | 
562 |       const result = await getEtfMarketCapRUB('TOVER');
563 | 
564 |       expect(result).toBeDefined();
565 |       expect(result!.marketCapRUB).toBe(200000000); // 2M * 100
                                         ^
error: expect(received).toBe(expected)

Expected: 200000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:565:36)
(fail) Weight Distribution Edge Cases Tests > Decorrelation Weight Distribution Edge Cases > should handle market cap much larger than AUM [1.00ms]
596 |       });
597 | 
598 |       const result = await getEtfMarketCapRUB('TUNDER');
599 | 
600 |       expect(result).toBeDefined();
601 |       expect(result!.marketCapRUB).toBe(50000000); // 0.5M * 100
                                         ^
error: expect(received).toBe(expected)

Expected: 50000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:601:36)
(fail) Weight Distribution Edge Cases Tests > Decorrelation Weight Distribution Edge Cases > should handle market cap much smaller than AUM
632 |       });
633 | 
634 |       const result = await getEtfMarketCapRUB('TMISSING');
635 | 
636 |       expect(result).toBeDefined();
637 |       expect(result!.numShares).toBe(1000000);
                                      ^
error: expect(received).toBe(expected)

Expected: 1000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:637:33)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution with Missing Data > should handle missing numShares gracefully [3.00ms]
671 |       });
672 | 
673 |       const result = await getEtfMarketCapRUB('TMISSING');
674 | 
675 |       expect(result).toBeDefined();
676 |       expect(result!.numShares).toBe(500000);
                                      ^
error: expect(received).toBe(expected)

Expected: 500000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:676:33)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution with Missing Data > should handle missing numShares and etfBy failure [2.00ms]
700 |       mockTinkoffSDK.instruments.getAssetBy.mockRejectedValue(new Error('Not found'));
701 | 
702 |       const result = await getEtfMarketCapRUB('TNODATA');
703 | 
704 |       expect(result).toBeDefined();
705 |       expect(result!.numShares).toBe(0);
                                      ^
error: expect(received).toBe(expected)

Expected: 0
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:705:33)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution with Missing Data > should handle completely missing share data [2.00ms]
728 |       const result = await getEtfMarketCapRUB('T@GLD');
729 | 
730 |       expect(result).toBeDefined();
731 |       if (result) {
732 |         expect(result.ticker).toBe('T@GLD');
733 |         expect(result.marketCapRUB).toBe(800000000); // 8M * 100
                                          ^
error: expect(received).toBe(expected)

Expected: 800000000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:733:37)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution with Special Characters > should handle tickers with special characters [3.00ms]
753 | 
754 |       const result = await getEtfMarketCapRUB('T₽UB');
755 | 
756 |       expect(result).toBeDefined();
757 |       // The function should handle unicode characters in tickers
758 |       expect(typeof result!.marketCapRUB).toBe('number');
                                                ^
error: expect(received).toBe(expected)

Expected: "number"
Received: "undefined"

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:758:43)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution with Special Characters > should handle tickers with unicode characters [2.00ms]
784 | 
785 |       expect(result1).toBeDefined();
786 |       expect(result2).toBeDefined();
787 |       expect(result3).toBeDefined();
788 | 
789 |       expect(result1!.numShares).toBe(1100000);
                                       ^
error: expect(received).toBe(expected)

Expected: 1100000
Received: undefined

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:789:34)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Performance Edge Cases > should handle large number of ETFs efficiently [4.00ms]
807 |       expect(results).toHaveLength(3);
808 |       results.forEach(result => {
809 |         expect(result).toBeDefined();
810 |         expect(result).not.toBeNull();
811 |         if (result) {
812 |           expect(result.marketCapRUB).toBeGreaterThan(0);
                                            ^
error: Expected and actual values must be numbers or bigints
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:812:39)
      at forEach (1:11)
      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:808:15)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Performance Edge Cases > should handle concurrent requests efficiently [2.00ms]
822 | 
823 |       // Mock the etfs method to reject with an unauthorized error
824 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('UNAUTHENTICATED: Network error'));
825 | 
826 |       const result = await getEtfMarketCapRUB('TRUR');
827 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  figi: "BBG_TRUR",
  uid: "UID_TRUR",
  lastPriceRUB: 100,
  ticker: "TRUR",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:827:22)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Error Handling Edge Cases > should handle unauthorized access errors gracefully [2.00ms]
833 | 
834 |       // Mock the etfs method to reject with a rate limit error
835 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('RESOURCE_EXHAUSTED: Rate limit exceeded'));
836 | 
837 |       const result = await getEtfMarketCapRUB('TRUR');
838 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  figi: "BBG_TRUR",
  uid: "UID_TRUR",
  lastPriceRUB: 100,
  ticker: "TRUR",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:838:22)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Error Handling Edge Cases > should handle rate limiting errors gracefully
844 | 
845 |       // Mock the etfs method to reject with a timeout error
846 |       mockTinkoffSDK.instruments.etfs.mockRejectedValue(new Error('DEADLINE_EXCEEDED: Request timed out'));
847 | 
848 |       const result = await getEtfMarketCapRUB('TRUR');
849 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  figi: "BBG_TRUR",
  uid: "UID_TRUR",
  lastPriceRUB: 100,
  ticker: "TRUR",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:849:22)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Error Handling Edge Cases > should handle network timeout errors gracefully [2.00ms]
857 |         // Missing instruments field
858 |         invalidResponse: true
859 |       });
860 | 
861 |       const result = await getEtfMarketCapRUB('TRUR');
862 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  figi: "BBG_TRUR",
  uid: "UID_TRUR",
  lastPriceRUB: 100,
  ticker: "TRUR",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:862:22)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Error Handling Edge Cases > should handle malformed API responses gracefully [2.00ms]
869 |       // Save original TOKEN and set it to empty string
870 |       const originalToken = process.env.TOKEN;
871 |       process.env.TOKEN = '';
872 | 
873 |       const result = await getEtfMarketCapRUB('TRUR');
874 |       expect(result).toBeNull();
                           ^
error: expect(received).toBeNull()

Received: {
  figi: "BBG_TRUR",
  uid: "UID_TRUR",
  lastPriceRUB: 100,
  ticker: "TRUR",
}

      at <anonymous> (/tmp/gh-issue-solver-1758074196784/src/__tests__/tools/etfCap-weight-distribution.test.ts:874:22)
(fail) Weight Distribution Edge Cases Tests > Weight Distribution Error Handling Edge Cases > should handle empty environment variables gracefully [2.00ms]

 1105 pass
 3 skip
 552 fail
 23 errors
 3511 expect() calls
Ran 1660 tests across 88 files. [4.69s]
