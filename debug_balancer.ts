import { balancer, normalizeDesire } from './src/balancer';
import { Wallet, DesiredWallet } from './src/types.d';
import { convertNumberToTinkoffNumber, sumValues } from './src/utils';
import _ from 'lodash';

console.log('=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ì–ò–ö–ò –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê ===\n');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –Ω–µ–±–∞–ª–∞–Ω—Å–æ–º
const testWallet: Wallet = [
  {
    base: 'TGLD',
    quote: 'RUB', 
    figi: 'BBG004S68505',
    amount: 100,
    lotSize: 1,
    price: convertNumberToTinkoffNumber(120),
    priceNumber: 120,
    lotPrice: convertNumberToTinkoffNumber(120),
    lotPriceNumber: 120,
    totalPrice: convertNumberToTinkoffNumber(12000),
    totalPriceNumber: 12000,
  },
  {
    base: 'TRUR',
    quote: 'RUB',
    figi: 'BBG004S68614', 
    amount: 10,  // –ú–∞–ª–æ TRUR
    lotSize: 1,
    price: convertNumberToTinkoffNumber(100),
    priceNumber: 100,
    lotPrice: convertNumberToTinkoffNumber(100),
    lotPriceNumber: 100,
    totalPrice: convertNumberToTinkoffNumber(1000),
    totalPriceNumber: 1000,
  },
  {
    base: 'RUB',
    quote: 'RUB',
    figi: undefined,
    amount: 2000, // –ú–Ω–æ–≥–æ —Ä—É–±–ª–µ–π
    lotSize: 1,
    price: convertNumberToTinkoffNumber(1),
    priceNumber: 1,
    lotPrice: convertNumberToTinkoffNumber(1), 
    lotPriceNumber: 1,
    totalPrice: convertNumberToTinkoffNumber(2000),
    totalPriceNumber: 2000,
  }
];

// –ñ–µ–ª–∞–µ–º—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å - –Ω—É–∂–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
const desiredWallet: DesiredWallet = {
  'TGLD': 40, // –ù—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å TGLD (—Å–µ–π—á–∞—Å 80%)
  'TRUR': 50, // –ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å TRUR (—Å–µ–π—á–∞—Å 6.7%)
  'RUB': 10   // –ù—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å RUB (—Å–µ–π—á–∞—Å 13.3%)
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
(global as any).INSTRUMENTS = [
  { ticker: 'TGLD', figi: 'BBG004S68505', lot: 1 },
  { ticker: 'TRUR', figi: 'BBG004S68614', lot: 1 }
];

async function debugBalancerLogic() {
  console.log('üìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –ü–û–†–¢–§–ï–õ–Ø:');
  const totalValue = _.sumBy(testWallet, 'totalPriceNumber');
  console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalValue}‚ÇΩ`);
  
  testWallet.forEach(pos => {
    const percentage = ((pos.totalPriceNumber || 0) / totalValue * 100).toFixed(1);
    console.log(`${pos.base}: ${pos.amount} √ó ${pos.priceNumber}‚ÇΩ = ${pos.totalPriceNumber}‚ÇΩ (${percentage}%)`);
  });
  
  console.log('\nüéØ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ñ–ï–õ–ê–ï–ú–û–ì–û –ü–û–†–¢–§–ï–õ–Ø:');
  console.log('–î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', desiredWallet);
  const normalizedDesire = normalizeDesire(desiredWallet);
  console.log('–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', normalizedDesire);
  
  console.log('\nüí∞ –†–ê–°–°–ß–ï–¢ –¶–ï–õ–ï–í–´–• –°–£–ú–ú:');
  Object.entries(normalizedDesire).forEach(([ticker, percentage]) => {
    const targetAmount = (totalValue * percentage) / 100;
    const currentPos = testWallet.find(p => p.base === ticker);
    const currentAmount = currentPos?.totalPriceNumber || 0;
    const difference = targetAmount - currentAmount;
    
    console.log(`${ticker}:`);
    console.log(`  –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: ${targetAmount.toFixed(0)}‚ÇΩ (${percentage}%)`);
    console.log(`  –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: ${currentAmount.toFixed(0)}‚ÇΩ`);
    console.log(`  –†–∞–∑–Ω–∏—Ü–∞: ${difference > 0 ? '+' : ''}${difference.toFixed(0)}‚ÇΩ ${difference > 0 ? '(–ö–£–ü–ò–¢–¨)' : '(–ü–†–û–î–ê–¢–¨)'}`);
  });

  console.log('\n‚öôÔ∏è –ó–ê–ü–£–°–ö–ê–ï–ú –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö...');
  
  try {
    const result = await balancer(testWallet, desiredWallet, [], 'manual', true);
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò:');
    console.log('–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –æ—Ä–¥–µ—Ä–∞:', result.ordersPlanned?.length || 0);
    
    if (result.ordersPlanned && result.ordersPlanned.length > 0) {
      console.log('\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –û–†–î–ï–†–û–í:');
      
      let sellOrders = 0;
      let buyOrders = 0;
      
      result.ordersPlanned.forEach((order, index) => {
        const toBuyLots = order.toBuyLots || 0;
        if (toBuyLots > 0) {
          buyOrders++;
          console.log(`${index + 1}. –ö–£–ü–ò–¢–¨ ${toBuyLots} –ª–æ—Ç–æ–≤ ${order.base}`);
          console.log(`   –¶–µ–Ω–∞ –∑–∞ –ª–æ—Ç: ${order.lotPriceNumber}‚ÇΩ`);
          console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${(toBuyLots * (order.lotPriceNumber || 0)).toFixed(0)}‚ÇΩ`);
        } else if (toBuyLots < 0) {
          sellOrders++;
          console.log(`${index + 1}. –ü–†–û–î–ê–¢–¨ ${Math.abs(toBuyLots)} –ª–æ—Ç–æ–≤ ${order.base}`);
          console.log(`   –¶–µ–Ω–∞ –∑–∞ –ª–æ—Ç: ${order.lotPriceNumber}‚ÇΩ`);
          console.log(`   –ü–æ–ª—É—á–∏–º: ${(Math.abs(toBuyLots) * (order.lotPriceNumber || 0)).toFixed(0)}‚ÇΩ`);
        }
      });
      
      console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: ${sellOrders} –ø—Ä–æ–¥–∞–∂, ${buyOrders} –ø–æ–∫—É–ø–æ–∫`);
      
      if (sellOrders === 0) {
        console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–ï–¢ –ü–†–û–î–ê–ñ!');
        console.log('–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
        console.log('–ü–æ —Ä–∞—Å—á–µ—Ç–∞–º –≤—ã—à–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–¥–∞–∂–∏ TGLD –∏ RUB.');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error);
  }
}

debugBalancerLogic();