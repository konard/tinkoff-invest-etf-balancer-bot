#!/usr/bin/env node

import { configLoader } from '../configLoader';
import { AccountConfig } from '../types.d';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */

function printAccountInfo(account: AccountConfig): void {
  console.log(`\nüìä –ê–∫–∫–∞—É–Ω—Ç: ${account.name} (ID: ${account.id})`);
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
  const rawToken = configLoader.getRawTokenValue(account.id);
  const resolvedToken = configLoader.getAccountToken(account.id);
  const isFromEnv = configLoader.isTokenFromEnv(account.id);
  
  if (isFromEnv) {
    console.log(`üîë –¢–æ–∫–µ–Ω: ${rawToken} ‚Üí ${resolvedToken || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    if (!resolvedToken) {
      console.log(`‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`);
    }
  } else {
    console.log(`üîë –¢–æ–∫–µ–Ω: ${rawToken} (–ø—Ä—è–º–æ —É–∫–∞–∑–∞–Ω)`);
  }
  
  console.log(`üíº –°—á–µ—Ç: ${account.account_id}`);
  console.log(`‚öôÔ∏è  –†–µ–∂–∏–º: ${account.desired_mode}`);
  console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: ${account.balance_interval / 1000 / 60} –º–∏–Ω`);
  console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏: ${account.sleep_between_orders} –º—Å`);
  
  console.log(`\nüìà –¶–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞:`);
  const totalWeight = Object.values(account.desired_wallet).reduce((sum, weight) => sum + weight, 0);
  Object.entries(account.desired_wallet).forEach(([ticker, weight]) => {
    console.log(`  ${ticker}: ${weight}%`);
  });
  console.log(`  –ò—Ç–æ–≥–æ: ${totalWeight}%`);
  
  if (Math.abs(totalWeight - 100) > 1) {
    console.log(`‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —Å—É–º–º–∞ –≤–µ—Å–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 100%`);
  }
  
  console.log(`\nüí∞ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è:`);
  console.log(`  –í–∫–ª—é—á–µ–Ω–∞: ${account.margin_trading.enabled ? '‚úÖ' : '‚ùå'}`);
  if (account.margin_trading.enabled) {
    console.log(`  –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${account.margin_trading.multiplier}x`);
    console.log(`  –ü–æ—Ä–æ–≥: ${account.margin_trading.free_threshold} ‚ÇΩ`);
    console.log(`  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${account.margin_trading.balancing_strategy}`);
  }
}

function validateConfig(): void {
  try {
    const config = configLoader.loadConfig();
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const accounts = config.accounts;
    const accountIds = new Set();
    const tokens = new Set();
    let envTokensCount = 0;
    let directTokensCount = 0;
    
    for (const account of accounts) {
      if (accountIds.has(account.id)) {
        console.log(`‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.id}`);
      }
      accountIds.add(account.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
      const rawToken = account.t_invest_token;
      const isFromEnv = configLoader.isTokenFromEnv(account.id);
      const resolvedToken = configLoader.getAccountToken(account.id);
      
      if (isFromEnv) {
        envTokensCount++;
        if (!resolvedToken) {
          console.log(`‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${account.id}: ${rawToken}`);
        }
      } else {
        directTokensCount++;
        if (tokens.has(resolvedToken || rawToken)) {
          console.log(`‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ç–æ–∫–µ–Ω: ${resolvedToken || rawToken}`);
        }
        tokens.add(resolvedToken || rawToken);
      }
    }
    
    console.log(`\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`  –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length}`);
    console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: ${accountIds.size}`);
    console.log(`  –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envTokensCount}`);
    console.log(`  –ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${directTokensCount}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    process.exit(1);
  }
}

function listAccounts(): void {
  const accounts = configLoader.getAllAccounts();
  
  if (accounts.length === 0) {
    console.log('‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    return;
  }
  
  console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length}`);
  
  accounts.forEach((account, index) => {
    const isFromEnv = configLoader.isTokenFromEnv(account.id);
    const tokenStatus = isFromEnv ? '${ENV}' : '–ø—Ä—è–º–æ';
    
    console.log(`\n${index + 1}. ${account.name} (${account.id})`);
    console.log(`   –¢–æ–∫–µ–Ω: ${account.t_invest_token} [${tokenStatus}]`);
    console.log(`   –°—á–µ—Ç: ${account.account_id}`);
    console.log(`   –†–µ–∂–∏–º: ${account.desired_mode}`);
  });
}

function showAccountDetails(accountId: string): void {
  const account = configLoader.getAccountById(accountId);
  
  if (!account) {
    console.error(`‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å ID '${accountId}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    const accounts = configLoader.getAllAccounts();
    accounts.forEach(acc => console.log(`  - ${acc.id}: ${acc.name}`));
    process.exit(1);
  }
  
  printAccountInfo(account);
}

function showEnvironmentSetup(): void {
  console.log('\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:');
  
  const accounts = configLoader.getAllAccounts();
  const envTokens = new Set<string>();
  
  accounts.forEach(account => {
    if (configLoader.isTokenFromEnv(account.id)) {
      const envVarName = account.t_invest_token.slice(2, -1);
      envTokens.add(envVarName);
    }
  });
  
  if (envTokens.size > 0) {
    Array.from(envTokens).forEach(token => {
      console.log(`${token}=`);
    });
  } else {
    console.log('(–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)');
  }
  
  console.log('\nOPENROUTER_API_KEY=your_api_key_here');
  console.log('OPENROUTER_MODEL=qwen/qwen3-235b-a22b-2507');
  
  console.log('\nüí° –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ CONFIG.json:');
  console.log('  "t_invest_token": "${T_INVEST_TOKEN_1}"  # –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('  "t_invest_token": "t.1234567890abcdef"   # –ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω');
}

function showTokenInfo(): void {
  console.log('\nüîë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:');
  console.log('\n–í CONFIG.json –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:');
  console.log('\n1Ô∏è‚É£ –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('   "t_invest_token": "${T_INVEST_TOKEN_1}"');
  console.log('   ‚Üí –ë—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ process.env.T_INVEST_TOKEN_1');
  console.log('\n2Ô∏è‚É£ –ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:');
  console.log('   "t_invest_token": "t.1234567890abcdef"');
  console.log('   ‚Üí –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –µ—Å—Ç—å');
  
  console.log('\nüìã –¢–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã:');
  const accounts = configLoader.getAllAccounts();
  accounts.forEach(account => {
    const isFromEnv = configLoader.isTokenFromEnv(account.id);
    const resolvedToken = configLoader.getAccountToken(account.id);
    const status = isFromEnv 
      ? (resolvedToken ? '‚úÖ' : '‚ùå') 
      : 'üîí';
    
    console.log(`  ${account.id}: ${account.t_invest_token} ${status}`);
    if (isFromEnv && !resolvedToken) {
      console.log(`    ‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });
}

function printHelp(): void {
  console.log(`
üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tinkoff Invest ETF Balancer Bot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run config [–∫–æ–º–∞–Ω–¥–∞] [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

–ö–æ–º–∞–Ω–¥—ã:
  list                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  show <account_id>       - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  validate               - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  env                    - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  tokens                 - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
  help                   - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run config list
  npm run config show account_1
  npm run config validate
  npm run config env
  npm run config tokens

–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
  CONFIG.json            - –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  .env                   - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏

–§–æ—Ä–º–∞—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤:
  "${VARIABLE_NAME}"     - –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  "t.1234567890abcdef"   - –ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  `);
}

function main(): void {
  const args = process.argv.slice(2);
  const command = args[0] || 'help';
  
  try {
    switch (command) {
      case 'list':
        listAccounts();
        break;
        
      case 'show':
        const accountId = args[1];
        if (!accountId) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞: npm run config show <account_id>');
          process.exit(1);
        }
        showAccountDetails(accountId);
        break;
        
      case 'validate':
        validateConfig();
        break;
        
      case 'env':
        showEnvironmentSetup();
        break;
        
      case 'tokens':
        showTokenInfo();
        break;
        
      case 'help':
      default:
        printHelp();
        break;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

